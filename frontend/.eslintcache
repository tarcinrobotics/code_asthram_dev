[{"D:\\tarcin\\code_asthram_dev\\frontend\\src\\index.js":"1","D:\\tarcin\\code_asthram_dev\\frontend\\src\\Login.js":"2","D:\\tarcin\\code_asthram_dev\\frontend\\src\\Register.js":"3","D:\\tarcin\\code_asthram_dev\\frontend\\src\\AuthProvider.js":"4","D:\\tarcin\\code_asthram_dev\\frontend\\src\\reportWebVitals.js":"5","D:\\tarcin\\code_asthram_dev\\frontend\\src\\component\\AnimLoader.js":"6","D:\\tarcin\\code_asthram_dev\\frontend\\src\\utils.js":"7","D:\\tarcin\\code_asthram_dev\\frontend\\src\\App.js":"8","D:\\tarcin\\code_asthram_dev\\frontend\\src\\dropDown.js":"9","D:\\tarcin\\code_asthram_dev\\frontend\\src\\scripts\\FloatingMiniScreen.js":"10","D:\\tarcin\\code_asthram_dev\\frontend\\src\\customBlocks\\openCv.js":"11","D:\\tarcin\\code_asthram_dev\\frontend\\src\\scripts\\ParentComponent.js":"12","D:\\tarcin\\code_asthram_dev\\frontend\\src\\customBlocks\\LogicBlocks.js":"13","D:\\tarcin\\code_asthram_dev\\frontend\\src\\customBlocks\\turtleBlocks.js":"14","D:\\tarcin\\code_asthram_dev\\frontend\\src\\customBlocks\\fileHandling.js":"15","D:\\tarcin\\code_asthram_dev\\frontend\\src\\customBlocks\\systemFunctions.js":"16","D:\\tarcin\\code_asthram_dev\\frontend\\src\\customBlocks\\plotting.js":"17","D:\\tarcin\\code_asthram_dev\\frontend\\src\\customBlocks\\Sorting.js":"18","D:\\tarcin\\code_asthram_dev\\frontend\\src\\customBlocks\\Pandas.js":"19","D:\\tarcin\\code_asthram_dev\\frontend\\src\\customBlocks\\Structure.js":"20","D:\\tarcin\\code_asthram_dev\\frontend\\src\\customBlocks\\Variable.js":"21","D:\\tarcin\\code_asthram_dev\\frontend\\src\\customBlocks\\Functions.js":"22","D:\\tarcin\\code_asthram_dev\\frontend\\src\\customBlocks\\scikit.js":"23","D:\\tarcin\\code_asthram_dev\\frontend\\src\\customBlocks\\nltk.js":"24","D:\\tarcin\\code_asthram_dev\\frontend\\src\\customBlocks\\numPy.js":"25","D:\\tarcin\\code_asthram_dev\\frontend\\src\\customBlocks\\tensorFlow.js":"26","D:\\tarcin\\code_asthram_dev\\frontend\\src\\customBlocks\\Flask.js":"27","D:\\tarcin\\code_asthram_dev\\frontend\\src\\customBlocks\\Django.js":"28","D:\\tarcin\\code_asthram_dev\\frontend\\src\\scripts\\buttonFunctions.js":"29","D:\\tarcin\\code_asthram_dev\\frontend\\src\\customBlocks\\custom_Blocks.js":"30"},{"size":1107,"mtime":1714546290459,"results":"31","hashOfConfig":"32"},{"size":9104,"mtime":1714546290444,"results":"33","hashOfConfig":"32"},{"size":5642,"mtime":1714546290444,"results":"34","hashOfConfig":"32"},{"size":475,"mtime":1714546290444,"results":"35","hashOfConfig":"32"},{"size":375,"mtime":1714546290491,"results":"36","hashOfConfig":"32"},{"size":1094,"mtime":1714546290444,"results":"37","hashOfConfig":"32"},{"size":279,"mtime":1714546290491,"results":"38","hashOfConfig":"32"},{"size":41566,"mtime":1714546290444,"results":"39","hashOfConfig":"32"},{"size":2326,"mtime":1714546290459,"results":"40","hashOfConfig":"32"},{"size":1159,"mtime":1714546290491,"results":"41","hashOfConfig":"32"},{"size":40089,"mtime":1714546290459,"results":"42","hashOfConfig":"32"},{"size":534,"mtime":1714546290491,"results":"43","hashOfConfig":"32"},{"size":10851,"mtime":1714546290459,"results":"44","hashOfConfig":"32"},{"size":13568,"mtime":1714546290459,"results":"45","hashOfConfig":"32"},{"size":9864,"mtime":1714546290459,"results":"46","hashOfConfig":"32"},{"size":5244,"mtime":1714546290459,"results":"47","hashOfConfig":"32"},{"size":22892,"mtime":1714546290459,"results":"48","hashOfConfig":"32"},{"size":17370,"mtime":1714546290459,"results":"49","hashOfConfig":"32"},{"size":19946,"mtime":1714546290459,"results":"50","hashOfConfig":"32"},{"size":13433,"mtime":1714546290459,"results":"51","hashOfConfig":"32"},{"size":15921,"mtime":1714546290459,"results":"52","hashOfConfig":"32"},{"size":5279,"mtime":1714546290459,"results":"53","hashOfConfig":"32"},{"size":25221,"mtime":1714546290459,"results":"54","hashOfConfig":"32"},{"size":24688,"mtime":1714546290459,"results":"55","hashOfConfig":"32"},{"size":34436,"mtime":1714546290459,"results":"56","hashOfConfig":"32"},{"size":21388,"mtime":1714546290459,"results":"57","hashOfConfig":"32"},{"size":17244,"mtime":1714546290459,"results":"58","hashOfConfig":"32"},{"size":24332,"mtime":1714546290459,"results":"59","hashOfConfig":"32"},{"size":419,"mtime":1714546290491,"results":"60","hashOfConfig":"32"},{"size":2955,"mtime":1714546290459,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"10u115j",{"filePath":"65","messages":"66","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"64"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"64"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"64"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"64"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"64"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"64"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"64"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\tarcin\\code_asthram_dev\\frontend\\src\\index.js",[],["130","131"],"D:\\tarcin\\code_asthram_dev\\frontend\\src\\Login.js",["132","133","134","135"],"import React, { useContext, useState } from \"react\";\r\nimport swal from \"sweetalert\";\r\nimport { Button, TextField } from \"@material-ui/core\";\r\nimport { withRouter } from \"./utils\";\r\nimport { useLocation,useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport mainLogo from \"./media/code_asthram.png\";\r\nimport tarproduct from \"./media/codeasthramproduct.png\";\r\nimport eve from \"./media/eve.gif\";\r\nimport quote from \"./media/caption.png\";\r\nimport copy from \"./media/copyright.png\";\r\nimport { FaUserAlt, FaLock, FaEye, FaEyeSlash } from 'react-icons/fa';\r\nimport AuthContext from \"./AuthProvider\";\r\n\r\nconst Login = (props) => {\r\n  const Navigate=useNavigate();\r\n  const { isLogin, setIsLogin }=useContext(AuthContext);\r\n  setIsLogin(localStorage.getItem(\"token\")? true :false)\r\n  if(isLogin){\r\n      Navigate(\"/dashboard\")\r\n  }\r\n  const location = useLocation();\r\n  const isLoginPage = location.pathname === \"/\";\r\n  \r\n  //Define setIsSuperuser state \r\n  const [isSuperuser, setIsSuperuser] = useState(false);\r\n\r\n  const [state, setState] = useState({\r\n    username: \"\",\r\n    password: \"\",\r\n    showPassword: false,\r\n  });\r\n\r\n  const onChange = (e) => setState({ ...state, [e.target.name]: e.target.value });\r\n\r\n  const togglePasswordVisibility = () => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      showPassword: !prevState.showPassword,\r\n    }));\r\n  };\r\n\r\n  const login = () => {\r\n\r\n    console.log('Login state:', state);\r\n  axios.post('https://code.tarcinrobotic.in/api/login', {\r\n  //  axios.post('https://code.tarcinrobotic.in/api/login', {\r\n      username: state.username,\r\n      password: state.password,\r\n    })\r\n      .then(response => {\r\n        // Handle the successful response from the server\r\n        console.log('Login successful:', response.data);\r\n\r\n        // Assuming the server sends a token, you might want to store it in local storage\r\n        localStorage.setItem('token', response.data.token);\r\n        localStorage.setItem('user_id', response.data.id);\r\n\r\n        \r\n        // Assuming the server sends information about whether the user is a superuser\r\n        const isSuperuser = response.data.isSuperuser;\r\n        console.log('isSuperuser:', isSuperuser);\r\n\r\n        // Set the isSuperuser state\r\n        setIsSuperuser(isSuperuser);\r\n        \r\n        // Check if the user is a superuser before making the /register request\r\n      if (isSuperuser) {\r\n\r\n       const superuserData = {\r\n        username: 'admin@tarcin.com',\r\n        password: 'tarcin301'\r\n       }\r\n       setIsSuperuser(true);\r\n\r\n        // Make a request to /register with the token\r\n        axios.post('http://localhost:2000/register', superuserData, {\r\n          headers: {\r\n            token: response.data.token,\r\n          },\r\n        })\r\n        .then(registerResponse => {\r\n          // Handle the response from the /register route\r\n          console.log('Registration successful:', registerResponse.data);\r\n        })\r\n        .catch(registerError => {\r\n          // Handle errors from the /register route\r\n          console.error('Registration error:', registerError);\r\n        });\r\n      }\r\n\r\n        // Redirect the user to the dashboard or do other actions upon successful login\r\n        props.navigate(\"/dashboard\");\r\n      })\r\n      .catch(error => {\r\n        // Handle errors from the server or network issues\r\n        console.error('Login error:', error);\r\n      \r\n        if (error.response && error.response.data && error.response.data.errorMessage) {\r\n          // Display an error message to the user\r\n          swal(\"Login Failed\", error.response.data.errorMessage, \"error\");\r\n        } else {\r\n          // Display a generic error message\r\n          swal(\"Login Failed\", \"An error occurred during login.\", \"error\");\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      e.preventDefault(); // Prevent the default form submission\r\n      login();\r\n    }\r\n  };\r\n\r\n    return (\r\n      <div className=\"whole\" style={{height: '100vh', width: '100%' }}>\r\n    <div className=\"container\" >\r\n      <div className=\"screen\" style={{borderRadius: '20px'}}>\r\n        <div className=\"screen__content\" >\r\n          <img src={mainLogo} style={{ height: \"50px\", width: \"200px\", position: \"relative\", top: \"120px\", left: \"15px\" }} alt=\"Logo\" />\r\n          <form className=\"login\">\r\n            <div className=\"login__field\" >\r\n            <FaUserAlt className=\"login__icon\" style={{ fontSize: '24px' }} />\r\n              <TextField\r\n                id=\"standard-basic\"\r\n                type=\"text\"\r\n                autoComplete=\"off\"\r\n                name=\"username\"\r\n                value={state.username}\r\n                onChange={onChange}\r\n                placeholder=\"User Name / Email\"\r\n                required\r\n                InputProps={{\r\n                  style: { fontSize: 16, size: 50, left: '28px' },\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"login__field\">\r\n            <FaLock className=\"login__icon\" style={{ fontSize: '24px' }} />\r\n              <TextField\r\n                id=\"standard-basic\"\r\n                type={state.showPassword ? 'text' : 'password'}\r\n                autoComplete=\"off\"\r\n                name=\"password\"\r\n                value={state.password}\r\n                onChange={onChange}\r\n                onKeyDown={handleKeyDown}\r\n                placeholder=\"Password\"\r\n                required\r\n                InputProps={{\r\n                  style: { fontSize: 16, size: 50, left: '28px' },\r\n                  endAdornment: (\r\n                    <span onClick={togglePasswordVisibility} style={{ cursor: 'pointer' }}>\r\n                      {state.showPassword ? <FaEyeSlash /> : <FaEye />}\r\n                    </span>\r\n                  ),\r\n                }}\r\n              />\r\n            </div>\r\n            <Button\r\n              className=\"login__submit\"\r\n              variant=\"contained\"\r\n              \r\n              size=\"small\"\r\n              onClick={login}\r\n              style={{ fontSize: \"16px\", fontWeight: 'bolder', Color: 'black', borderRadius:'40px' }}\r\n            >\r\n              <span className=\"button__text\">Log In</span>\r\n              <i className=\"button__icon fas fa-chevron-right\"></i>\r\n            </Button>\r\n           {/*} <button\r\n              className=\"register__submit\"\r\n              component=\"button\"\r\n              onClick={() => {\r\n                this.props.navigate(\"/register\");\r\n              }}\r\n            >\r\n              <span className=\"button__text\">Register</span>\r\n              <i className=\"button__icon fas fa-chevron-right\"></i>\r\n            </button> */}\r\n          </form>\r\n          <div className=\"social-login\">\r\n            {/* Add your social login components here */}\r\n          </div>\r\n        </div>\r\n        <div className=\"screen__background\">\r\n          <span className=\"screen__background__shape screen__background__shape4\"></span>\r\n          <span className=\"screen__background__shape screen__background__shape3\"></span>\r\n          <span className=\"screen__background__shape screen__background__shape2\"></span>\r\n          <span className=\"screen__background__shape screen__background__shape1\"></span>\r\n        </div>\r\n      </div>\r\n      <div className=\"rightbody\" style={{ display: 'flex', height: '100vh', width: '850px', position: 'absolute', left: '400px' }}>\r\n          <div className=\"tarcin-product\" style={{ display: 'flex', position: 'absolute', right: '0', top: '10%' }}>\r\n            <img\r\n              src={tarproduct}\r\n              style={{ height: '400px', width: '800px', transition: 'transform 0.2s', cursor: 'pointer' }}\r\n              alt=\"tarproduct\"\r\n              onMouseOver={(e) => e.target.style.transform = 'scale(1.1)'}\r\n              onMouseOut={(e) => e.target.style.transform = 'scale(1)'}\r\n            />\r\n          </div>\r\n          <div className=\"tarcin-quote\" style={{ display: 'flex', position: 'absolute', right: '5%', top: '35%' }}>\r\n            <img\r\n              src={quote}\r\n              style={{ height: '300px', width: '700px', transition: 'transform 0.2s', cursor: 'pointer' }}\r\n              alt=\"quote\"\r\n              onMouseOver={(e) => e.target.style.transform = 'scale(1.1)'}\r\n              onMouseOut={(e) => e.target.style.transform = 'scale(1)'}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"eva-gif\" style={{ position: 'absolute', display: 'flex', right: '0' }}>\r\n            <img src={eve} style={{ height: '150px', width: '150px' }} />\r\n          </div>\r\n\r\n          <footer style={{ position: 'absolute', bottom: '20%', left: '30%', display: 'flex' }}>\r\n            <img\r\n              src={copy}\r\n              style={{ height: '150px', width: '350px', transition: 'transform 0.2s', cursor: 'pointer' }}\r\n              onMouseOver={(e) => e.target.style.transform = 'scale(1.1)'}\r\n              onMouseOut={(e) => e.target.style.transform = 'scale(1)'}\r\n            />\r\n          </footer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    );\r\n  };\r\n\r\nexport default withRouter(Login);","D:\\tarcin\\code_asthram_dev\\frontend\\src\\Register.js",["136"],"import React, { useState } from \"react\";\r\nimport swal from \"sweetalert\";\r\nimport { Button, TextField, Link, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from \"@material-ui/core\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport PasswordStrengthBar from 'react-password-strength-bar';\r\nimport './Register.css';\r\n\r\n\r\nconst Register = () => {\r\n  const navigate = useNavigate(); // Use useNavigate hook for navigation\r\n\r\n  const [state, setState] = useState({\r\n    username: \"\",\r\n    password: \"\",\r\n    confirm_password: \"\",\r\n  });\r\n\r\n  const [passwordStrength, setPasswordStrength] = useState(0);\r\n\r\n  const [registrations, setRegistrations] = useState([]);\r\n// Function to calculate password strength (you can customize this logic)\r\nconst calculatePasswordStrength = (password) => {\r\n \r\n // Your logic to calculate password strength\r\n // For simplicity, Let's assume the strength is based on the password length\r\n\r\n  const lengthStrength = Math.min(password.length / 8, 1);\r\n  return lengthStrength;\r\n}\r\n\r\n  const onChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setState({ ...state, [name]: value });\r\n  \r\n    // Calculate and update password strength\r\n    if (name === 'password') {\r\n      // Use your own logic to calculate password strength (you can use a separate function or library)\r\n      const strength = calculatePasswordStrength(value);\r\n      setPasswordStrength(strength);\r\n    }\r\n  };\r\n\r\n  const register = () => {\r\n    axios\r\n      .post(\"http://localhost:2000/register\", {\r\n        username: state.username,\r\n        password: state.password,\r\n      })\r\n      .then((res) => {\r\n        swal({\r\n          text: res.data.title,\r\n          icon: \"success\",\r\n          type: \"success\",\r\n        });\r\n        setRegistrations([...registrations, { username: state.username, password: state.password }]);\r\n        setState({\r\n          username: \"\",\r\n          password: \"\",\r\n          confirm_password: \"\",\r\n        });\r\n      })\r\n        .catch((err) => {\r\n        swal({\r\n          text: err.response.data.errorMessage,\r\n          icon: \"error\",\r\n          type: \"error\",\r\n        });\r\n      });\r\n  };\r\n\r\n    return (\r\n      <div className=\"register-main\"\r\n      >\r\n        \r\n        <div>\r\n          <h2 style={{ fontWeight:'bolder'  }}>Register</h2>\r\n        <div>\r\n          <TextField\r\n            id=\"standard-basic\"\r\n            type=\"text\"\r\n            autoComplete=\"off\"\r\n            name=\"username\"\r\n            value={state.username}\r\n            onChange={onChange}\r\n            placeholder=\"User Name\"\r\n            required\r\n            InputProps={{\r\n              style: { fontSize: 16, size: 50 },\r\n            }}\r\n          />\r\n          </div>\r\n          <br /><br />\r\n          <div>\r\n          <TextField\r\n            id=\"standard-basic\"\r\n            type=\"password\"\r\n            autoComplete=\"off\"\r\n            name=\"password\"\r\n            value={state.password}\r\n            onChange={onChange}\r\n            placeholder=\"Password\"\r\n            required\r\n            InputProps={{\r\n              style: { fontSize: 16, size: 50 },\r\n            }}\r\n          />\r\n          <br /><br />\r\n          <div style={{ width: '200px' }}>\r\n            <PasswordStrengthBar password={state.password} />\r\n          </div>\r\n          </div>\r\n          <div>\r\n          <TextField\r\n            id=\"standard-basic\"\r\n            type=\"password\"\r\n            autoComplete=\"off\"\r\n            name=\"confirm_password\"\r\n            value={state.confirm_password}\r\n            onChange={onChange}\r\n            placeholder=\"Confirm Password\"\r\n            required\r\n            InputProps={{\r\n              style: { fontSize: 16, size: 50 },\r\n            }}\r\n/>\r\n\r\n          <br /><br />\r\n          </div>\r\n          <Button\r\n            className=\"button_style\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            size=\"small\"\r\n            disabled={state.username === '' || state.password === '' || state.password !== state.confirm_password}\r\n            onClick={register}\r\n            style={{fontSize: '15px'}}\r\n          >\r\n            Register\r\n          </Button> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n          <Link\r\n            // href=\"/\"\r\n            component=\"button\"\r\n            style={{ fontFamily: \"inherit\", fontSize: \"16px\" }}\r\n            onClick={() => {\r\n              navigate(\"/\");\r\n            }}\r\n          >\r\n            Login\r\n          </Link>\r\n          <br/><br />\r\n          </div>\r\n\r\n         <div className=\"registered-users\" >\r\n          <div>\r\n          <h3>Registered Users</h3>\r\n          <TableContainer component={Paper}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell \r\n                  style={{fontSize:\"16px\"}}\r\n                  >Username</TableCell>\r\n                  <TableCell\r\n                  style={{fontSize:\"16px\"}}\r\n                  >Password</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {registrations.map((user, index) => (\r\n                  <TableRow key={index}>\r\n                  <TableCell\r\n                  style={{fontSize:\"13px\"}}\r\n                  >{user.username}</TableCell>\r\n                  <TableCell\r\n                  style={{fontSize:\"13px\"}}\r\n                  >{user.password}</TableCell>\r\n                  </TableRow>                  \r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default Register;\r\n","D:\\tarcin\\code_asthram_dev\\frontend\\src\\AuthProvider.js",[],"D:\\tarcin\\code_asthram_dev\\frontend\\src\\reportWebVitals.js",[],"D:\\tarcin\\code_asthram_dev\\frontend\\src\\component\\AnimLoader.js",["137","138"],"import React, { useState, useEffect } from 'react';\r\nimport SyncLoader from \"react-spinners/SyncLoader\";\r\nimport './animloader.css';\r\nimport App from '../App'; // Import the App component\r\nimport PreLogo from './code_asthram_logo.png';\r\nimport MainBack from './code_asthram_logo.gif';\r\n\r\nfunction AnimLoader() {\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setLoading(false);        \r\n        }, 2200);\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            {loading ? (\r\n                <div className='loader'>\r\n                    <img src={MainBack} style={{ height: \"100vh\", width: \"100%\" }} alt='Loading...' />\r\n                    <div className='anim'>\r\n                        {/*<img src={piggy} loading={loading} size={10}/>*/}\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <div >\r\n                    {/* Render the App component here */}\r\n                    <App />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AnimLoader;\r\n","D:\\tarcin\\code_asthram_dev\\frontend\\src\\utils.js",[],"D:\\tarcin\\code_asthram_dev\\frontend\\src\\App.js",["139","140","141","142","143","144","145","146","147"],"import \"./App.css\";\r\nimport React, { useRef, useState, useEffect, forwardRef } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { BlocklyWorkspace } from \"react-blockly\";\r\nimport Blockly from \"blockly\";\r\nimport BlocklyDuino from \"react-blockly\";\r\nimport logo from './component/code_asthram.png';\r\nimport html2canvas from 'html2canvas';\r\nimport \"./css/bootstrap.min.3.3.6.css\";\r\nimport \"./css/blocklino.css\";\r\nimport { toggleModal } from \"./scripts/buttonFunctions\";\r\nimport modulesData from \"./scripts/modules.json\";\r\nimport { ModuleDropdown, ProjectDropdown } from './dropDown.js';\r\nimport FloatingScreen from \"./scripts/FloatingMiniScreen.js\";\r\nimport ParentComponent from \"./scripts/ParentComponent.js\";\r\n\r\nimport \"./customBlocks/custom_Blocks\";\r\nimport \"./customBlocks/LogicBlocks.js\";\r\nimport \"./customBlocks/openCv.js\";\r\nimport \"./customBlocks/turtleBlocks.js\";\r\nimport \"./customBlocks/plotting.js\";\r\nimport \"./customBlocks/systemFunctions.js\";\r\nimport \"./customBlocks/Structure.js\";\r\nimport \"./customBlocks/fileHandling.js\";\r\nimport \"./customBlocks/Variable.js\";\r\nimport \"./customBlocks/Sorting.js\";\r\nimport \"./customBlocks/Functions.js\";\r\nimport \"./customBlocks/Pandas.js\";\r\nimport \"./customBlocks/tensorFlow.js\";\r\nimport \"./customBlocks/numPy.js\";\r\nimport \"./customBlocks/nltk.js\";\r\nimport \"./customBlocks/scikit.js\";\r\nimport \"./customBlocks/Django.js\";\r\nimport \"./customBlocks/Flask.js\";\r\n\r\nexport default function App() {\r\n\r\n  const [xml, setXml] = useState(\"\");\r\n  const [javascriptCode, setJavascriptCode] = useState(\"\");\r\n  const [workspace, setWorkspace] = useState(null);\r\n\r\n  const [selectedModuleIndex, setSelectedModuleIndex] = useState(null);\r\n  const [selectedProject, setSelectedProject] = useState(null);\r\n  \r\n  const [isVisible, setIsVisible] = useState(false); // State to control visibility of the FloatingScreen\r\n  const [showMiniScreen, setShowMiniScreen] = useState(false);\r\n  const fileInputRef = useRef(null);\r\n  const workspaceRef = useRef(null);\r\n  const navigate = useNavigate();\r\n\r\n  const initialXml =\r\n    '<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"text\" x=\"70\" y=\"30\"><field name=\"TEXT\"></field></block></xml>';\r\n  \r\n    const toolboxCategories = {\r\n    kind: \"categoryToolbox\",\r\n    contents: [\r\n      {\r\n        kind: \"category\",\r\n        name: \"Logic\",\r\n        colour: \"#3172A3\",\r\n        contents: [\r\n          {kind: \"block\", type: \"controls_ifelse\"\r\n        }, {  kind: \"block\",   type: \"controls_if_elif\",\r\n        }, {  kind: \"block\",   type: \"controls_if\",\r\n      },\r\n       // { kind: \"block\", type: \"if_elif_else_dropdown\" },\r\n       {\r\n          kind: \"block\",\r\n          type: \"controls_else\",\r\n        },\r\n          {kind: \"block\", type: \"logic_compare\",},\r\n          {kind: \"block\", type: \"controls_if_if\",},\r\n          {kind: \"block\", type: \"controls_if_elseif\",},\r\n          { kind: \"block\",type: \"logic_operation\", },\r\n          { kind: \"block\",type: \"logic_negate\",},\r\n          {kind: \"block\",type: \"logic_boolean\", },\r\n          {kind: \"block\", type: \"arithmetic_operator\"},\r\n          {kind: \"block\", type: \"assignment_operator\"},\r\n          { kind: \"block\",type: \"logic_null\",},\r\n          { kind: \"block\",type: \"logic_ternary\", },\r\n        ], },\r\n      {\r\n        kind: \"category\",\r\n        name: \"Loops\",\r\n        colour: \"#227446\",\r\n        contents: [\r\n          {\r\n            kind: \"block\",\r\n            type: \"controls_repeat_ext\",\r\n            colour: \"#FFB266\"\r\n          },\r\n        \r\n          {\r\n            kind: \"block\",\r\n            type: \"controls_whileUntil\",\r\n          },\r\n          {\r\n            kind: \"block\",\r\n            type: \"controls_for\",\r\n          },\r\n          {\r\n            kind: \"block\",\r\n            type: \"controls_forEach\",\r\n          },\r\n          {\r\n            kind: \"block\",\r\n            type: \"controls_flow_statements\",\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        kind: \"category\",\r\n        name: \"Math\",\r\n        colour: \"#4B0082\",\r\n        contents: [\r\n          {\r\n            kind: \"block\",\r\n            type: \"math_round\",\r\n          },\r\n          {\r\n            kind: \"block\",\r\n            type: \"math_number\",\r\n          },\r\n          {\r\n            kind: \"block\",\r\n            type: \"math_arithmetic\",\r\n          },\r\n          {\r\n            kind: \"block\",\r\n            type: \"math_single\",\r\n          },\r\n          {\r\n            kind: \"block\",\r\n            type: \"math_trig\",\r\n          },\r\n          {\r\n            kind: \"block\",\r\n            type: \"math_constant\",\r\n          },\r\n          {\r\n            kind: \"block\",\r\n            type: \"math_on_list\",\r\n          },\r\n          {\r\n            kind: \"block\",\r\n            type: \"math_modulo\",\r\n          },\r\n          {\r\n            kind: \"block\",\r\n            type: \"math_constrain\",\r\n          },\r\n          /*{\r\n            kind: \"block\",\r\n            type: \"math_random_init\",\r\n          },*/\r\n          {\r\n            kind: \"block\",\r\n            type: \"math_random_float\",\r\n          },\r\n          {\r\n            kind: \"block\",\r\n            type: \"math_atan2\",\r\n          },\r\n        ],\r\n      },\r\n\r\n      {\r\n        kind: \"category\",\r\n        name: \"Text\",\r\n        colour: \"#70DBDB\",\r\n        contents: [\r\n          {\r\n            kind: \"block\",\r\n            type: \"text\",\r\n          },\r\n          {\r\n            kind: \"block\",\r\n            type: \"text_join\",\r\n          },\r\n          {\r\n            kind: \"block\",\r\n            type: \"text_append\",\r\n          },\r\n          {\r\n            kind: \"block\",\r\n            type: \"text_length\",\r\n          },\r\n          {\r\n            kind: \"block\",\r\n            type: \"text_isEmpty\",\r\n          },\r\n          {\r\n            kind: \"block\",\r\n            type: \"text_indexOf\",\r\n          },\r\n          {\r\n            kind: \"block\",\r\n            type: \"text_charAt\",\r\n          },\r\n          {\r\n            kind: \"block\",\r\n            type: \"text_getSubstring\",\r\n          },\r\n          {\r\n            kind: \"block\",\r\n            type: \"text_changeCase\",\r\n          },\r\n          {\r\n            kind: \"block\",\r\n            type: \"text_trim\",\r\n          },\r\n          {\r\n            kind: \"block\",\r\n            type: \"text_print\",\r\n          },\r\n          {\r\n            kind: \"block\",\r\n            type: \"text_prompt_ext\",\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        kind: \"category\",\r\n        name: \"Lists\",\r\n        colour: \"#DA70D6\",\r\n        contents: [\r\n          {\r\n            kind: \"block\",\r\n            type: \"lists_create_with\",\r\n          },\r\n          {\r\n            kind: \"block\",\r\n            type: \"lists_repeat\",\r\n          },\r\n          {\r\n            kind: \"block\",\r\n            type: \"lists_length\",\r\n          },\r\n          {\r\n            kind: \"block\",\r\n            type: \"lists_isEmpty\",\r\n          },\r\n          {\r\n            kind: \"block\",\r\n            type: \"lists_indexOf\",\r\n          },\r\n          {\r\n            kind: \"block\",\r\n            type: \"lists_getIndex\",\r\n          },\r\n          {\r\n            kind: \"block\",\r\n            type: \"lists_setIndex\",\r\n          },\r\n          {\r\n            kind: \"block\",\r\n            type: \"lists_getSublist\",\r\n          },\r\n          {\r\n            kind: \"block\",\r\n            type: \"lists_split\",\r\n          },\r\n          {\r\n            kind: \"block\",\r\n            type: \"lists_sort\",\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        kind: \"category\",\r\n        name: \"Colours\",\r\n        colour: \"#A0522D\",\r\n        contents: [\r\n          {kind: \"block\",type: \"colour_picker\", },\r\n          { kind: \"block\",type: \"colour_random\", },\r\n          {kind: \"block\",type: \"colour_rgb\", },\r\n          { kind: \"block\",type: \"colour_blend\",},\r\n          \r\n        ],\r\n      },\r\n\r\n      {\r\n        kind: \"category\",\r\n        name: \"Variables\",\r\n        colour: \"#FFFF00\",\r\n        contents: [\r\n          {kind: \"block\", type: \"create_variable\"},\r\n          {kind: \"block\", type: \"create_variable_2\"},\r\n          { kind: \"block\", type: \"set_variable\", },\r\n          { kind: \"block\", type: \"plain_variable\", },\r\n          { kind: \"block\", type: \"array_declaration\",},\r\n          { kind: \"block\", type: \"check_variable_value\", },\r\n          { kind: \"block\", type: \"swap_variables\", },\r\n          { kind: \"block\", type: \"convert_to_data_type\", },\r\n          { kind: \"block\", type: \"copy_variable\",},\r\n          { kind: \"block\", type: \"float_operator\",},\r\n          { kind: \"block\", type: \"import_statements\",},\r\n          { kind: \"block\", type: \"time_sleep\",},\r\n          { kind: \"block\", type: \"user_input\",},\r\n          { kind: \"block\", type: \"find_maximum_value\", },\r\n          { kind: \"block\", type: \"calculate_average\", },\r\n          { kind: \"block\", type: \"variable_scope\",},\r\n          { kind: \"block\", type: \"increment_variable\", },\r\n          { kind: \"block\", type: \"decrement_variable\", },\r\n          { kind: \"block\", type: \"reset_variable\",},\r\n\r\n        ],\r\n      },\r\n      \r\n      {\r\n        kind: \"category\",\r\n        name: \"Structure\",\r\n        colour: \"#003153\",\r\n        contents: [\r\n          {kind: \"block\", type: \"base_structure\", },\r\n          { kind: \"block\",type: \"declaration_structure\", },\r\n          { kind: \"block\", type: \"custom_yield\",},\r\n          {kind: \"block\", type: \"if_else_structure\", },\r\n          { kind: \"block\",type: \"dynamic_for_loop\", },\r\n          { kind: \"block\", type: \"while_loop_structure\",},\r\n          {kind: \"block\", type: \"do_while_loop_structure\", },\r\n          { kind: \"block\",type: \"class_structure\", },\r\n          { kind: \"block\",type: \"break_statement\", },\r\n          {kind: \"block\", type: \"function_definition_structure\", },\r\n          { kind: \"block\",type: \"try_catch_structure\", },\r\n          { kind: \"block\", type: \"switch_case_structure\",},\r\n          \r\n        ],\r\n      },\r\n\r\n      {\r\n        kind: \"category\",\r\n        name: \"Functions\",\r\n        colour: \"#E2725B\",\r\n        contents: [\r\n          { kind: \"block\",type: \"new_boundary_function\",colour:\"#191970\" },\r\n          {kind: \"block\",type: \"return\", },\r\n          { kind: \"block\",type: \"calculate_average\", },\r\n          {kind: \"block\",type: \"find_maximum\", },\r\n          { kind: \"block\",type: \"calculate_factorial\", },\r\n          { kind: \"block\",type: \"calculate_sum\", },\r\n          {kind: \"block\",type: \"calculate_median\", },\r\n          { kind: \"block\",type: \"calculate_power\", },\r\n          { kind: \"block\",type: \"calculate_standard_deviation\", },\r\n          {kind: \"block\",type: \"calculate_variance\", },\r\n          { kind: \"block\",type: \"calculate_mean_absolute_deviation\", },\r\n        ],\r\n      },\r\n\r\n      {\r\n        kind: \"category\",\r\n        name: \"Turtle\",\r\n        colour: \"#800020\",\r\n        contents: [\r\n          { kind: \"block\", type: \"turtle_create_screen\"\r\n          },\r\n          {\r\nkind: \"block\", type: \"turtle_set_background_color\"\r\n          },\r\n          {\r\n            kind: \"block\",\r\n            type: \"turtle_command\",\r\n          },\r\n          {\r\n            kind: \"block\",\r\n            type: \"turtle_turn\",\r\n          },\r\n          { kind: \"block\", type: \"turtle_shape\",},\r\n          { kind: \"block\", type: \"turtle_pen\",},\r\n          { kind: \"block\", type: \"turtle_color\",},\r\n          { kind: \"block\", type: \"turtle_write\",},\r\n          {kind: \"block\", type: \"turtle_circle\"},\r\n          { kind: \"block\", type: \"turtle_goto\",},\r\n          { kind: \"block\", type: \"turtle_ondrag\",},\r\n          /*{ kind: \"block\", type: \"turtle_pos\",},*/\r\n          { kind: \"block\", type: \"turtle_stamp\",},\r\n          {kind: \"block\", type: \"turtle_done\",},\r\n          { kind: \"block\", type: \"turtle_begin_fill\",},\r\n          { kind: \"block\", type: \"turtle_end_fill\",},\r\n          { kind: \"block\", type: \"turtle_speed\",},\r\n        ],\r\n      },\r\n\r\n      {\r\n        kind: \"category\",\r\n        name: \"Plotting\",\r\n        colour: \"#008080\",\r\n        contents: [\r\n          {\r\n            kind: \"block\",\r\n            type: \"matplotlib_title\",\r\n          },\r\n          {\r\n            kind: \"block\",\r\n            type: \"matplotlib_xlabel\",\r\n          }, {kind: \"block\", type: \"matplotlib_bar_plot\"},\r\n          {kind: \"block\", type: \"matplotlib_show_plot\"},\r\n          {kind: \"block\", type: \"matplotlib_add_legend\"},\r\n          {kind: \"block\", type: \"matplotlib_plot_histogram\"},\r\n          {kind: \"block\", type: \"matplotlib_plot_scatter\"},\r\n          {kind: \"block\", type: \"matplotlib_plot_pie\"},\r\n          {kind: \"block\", type: \"matplotlib_add_grid\"},\r\n          {kind: \"block\", type: \"matplotlib_create_figure\"},\r\n          {kind: \"block\", type: \"matplotlib_create_subplot\"},\r\n          {kind: \"block\", type: \"matplotlib_add_subtitle\"},\r\n          {kind: \"block\", type: \"matplotlib_add_colorbar\"},\r\n          {kind: \"block\", type: \"mappable_object\"},\r\n          {kind: \"block\", type: \"matplotlib_plot\"},\r\n          { kind: \"block\", type: \"matplotlib_ylabel\",},\r\n          { kind: \"block\", type: \"numpy_linspace\",},\r\n          { kind: \"block\", type: \"numpy_arange\",},\r\n          { kind: \"block\", type: \"numpy_array\",},\r\n          { kind: \"block\", type: \"numpy_trigonometric\",},\r\n        //  { kind: \"block\", type: \"numpy_exp\",},\r\n        ],\r\n      },\r\n\r\n      {\r\n        kind: \"category\",\r\n        name: \"Sorting\",\r\n        colour: \"#610C04\",\r\n        contents: [\r\n          {kind: \"block\",type: \"initialize_array\",},\r\n          { kind: \"block\", type: \"set_list_element\",},\r\n        {kind: \"block\",type: \"bubble_sort_logic\",},\r\n          {kind: \"block\",type: \"swap_elements\",},\r\n          { kind: \"block\", type: \"for_loop\",},\r\n          { kind: \"block\", type: \"if_statement\",},\r\n          {kind: \"block\",type: \"return_statement\",},\r\n          { kind: \"block\", type: \"insertion_sort_logic\",},\r\n          {kind: \"block\",type: \"compare_elements\",},\r\n          { kind: \"block\", type: \"merge_sort_logic\",},\r\n          {kind: \"block\",type: \"merge\",},\r\n          {kind: \"block\",type: \"quick_sort_logic\",},\r\n          { kind: \"block\", type: \"partition\",},\r\n          {kind: \"block\",type: \"combine\",},\r\n          {kind: \"block\",type: \"bubble_sort\",},\r\n          { kind: \"block\", type: \"insertion_sort\",},\r\n          {kind: \"block\",type: \"merge_sort\",},\r\n        {kind: \"block\",type: \"quick_sort\",}\r\n    \r\n        ],\r\n      },\r\n\r\n      {\r\n        kind: \"category\",\r\n        name: \"System Functions\",\r\n        colour: \"#FF4500\",\r\n        contents: [\r\n          {kind: \"block\",type: \"delay\",},\r\n          { kind: \"block\", type: \"delayed_execution\",},\r\n          {kind: \"block\",type: \"file_system_functions\",},\r\n          { kind: \"block\", type: \"system_info_functions\",},   \r\n          {kind: \"block\",type: \"networking_functions\",},\r\n          { kind: \"block\", type: \"system_configuration_functions\",},\r\n          {kind: \"block\",type: \"system_monitoring_functions\",},\r\n          {kind: \"block\",type: \"system_command_execution_functions\",},\r\n          {kind: \"block\",type: \"system_time_functions\",},\r\n          { kind: \"block\", type: \"system_exit_function\",},\r\n          {kind: \"block\",type: \"system_reboot_function\",},\r\n\r\n        ],\r\n      },\r\n\r\n     \r\n\r\n      {\r\n        kind: \"category\",\r\n        name: \"File Handling\",\r\n        colour: \"#7851A9\",\r\n        contents: [\r\n          {\r\n            kind: \"block\",\r\n            type: \"file_open\",\r\n          },\r\n          {\r\n            kind: \"block\",\r\n            type: \"file_read\",\r\n          },\r\n          { kind: \"block\", type: \"file_write\"},\r\n          { kind: \"block\", type: \"file_close\"},\r\n          { kind: \"block\", type: \"get_file_contents\"},\r\n          { kind: \"block\", type: \"file_handling_with_input\"},\r\n          { kind: \"block\", type: \"print\"},\r\n          { kind: \"block\", type: \"file_exists\"},\r\n          { kind: \"block\", type: \"file_rename\"},\r\n          { kind: \"block\", type: \"file_delete\"},\r\n          { kind: \"block\", type: \"file_size\"},\r\n          { kind: \"block\", type: \"file_extension\",},\r\n          { kind: \"block\", type: \"list_files\"},\r\n          { kind: \"block\", type: \"file_copy\"},\r\n          { kind: \"block\", type: \"file_move\"},\r\n        ],\r\n      },\r\n      {\r\n        kind: \"category\",\r\n        \"name\": \"Pandas\",\r\n        \"colour\": \"#FFA07A\",\r\n        \"contents\": [\r\n          { kind: \"block\", type: \"import_pandas\", \"colour\": \"#FFA07A\" },\r\n          { kind: \"block\", type: \"create_dataframe\", \"colour\": \"#FFA07A\" },\r\n          { kind: \"block\", type: \"read_csv\", \"colour\": \"#FFA07A\" },\r\n          { kind: \"block\", type: \"describe_data\", \"colour\": \"#FFA07A\" },\r\n          { kind: \"block\", type: \"select_columns\", \"colour\": \"#FFA07A\" },\r\n          { kind: \"block\", type: \"group_data\", \"colour\": \"#FFA07A\" },\r\n          { kind: \"block\", type: \"filter_data\", \"colour\": \"#FFA07A\" },\r\n          { kind: \"block\", type: \"sort_data\", \"colour\": \"#FFA07A\" },\r\n          { kind: \"block\", type: \"plot_data\", \"colour\": \"#FFA07A\" },\r\n          {kind: \"block\",  type: \"merge_dataframes\",    \"colour\": \"#FFA07A\"  },\r\n          { kind: \"block\", type: \"concatenate_dataframes\", \"colour\": \"#FFA07A\" },\r\n          {kind: \"block\", type: \"group_by_and_aggregate\", \"colour\": \"#FFA07A\" },\r\n          {kind: \"block\", type: \"pivot_table\", \"colour\": \"#FFA07A\"  },\r\n          { kind: \"block\",   type: \"apply_function\",  \"colour\": \"#FFA07A\"     },\r\n          { kind: \"block\",type: \"rename_columns\",\"colour\": \"#FFA07A\"      }\r\n,{ kind: \"block\", type: \"drop_columns\",\"colour\": \"#FFA07A\"},       \r\n{ kind: \"block\", type: \"fillna_values\", \"colour\": \"#FFA07A\" },\r\n{ kind: \"block\", type: \"drop_duplicates\", \"colour\": \"#FFA07A\" },\r\n{ kind: \"block\", type: \"reset_index\", \"colour\": \"#FFA07A\" },\r\n{ kind: \"block\", type: \"set_index\", \"colour\": \"#FFA07A\" },\r\n{ kind: \"block\", type: \"group_by_and_transform\", \"colour\": \"#FFA07A\" }   \r\n          \r\n  \r\n        ]\r\n      },\r\n\r\n      {\r\n        kind: \"category\",\r\n        name: \"TensorFlow\",\r\n        colour: \"#FF4500\",\r\n        contents: [\r\n          {kind: \"block\", type: \"import_tensorflow\"},\r\n          {kind: \"block\", type: \"define_sequential_model\"},\r\n          {kind: \"block\", type: \"add_dense_layer\"},\r\n          {kind: \"block\", type: \"compile_model\"},\r\n          {kind: \"block\", type: \"define_conv2d_layer\"},\r\n          {kind: \"block\", type: \"define_maxpooling2d_layer\"},\r\n          {kind: \"block\", type: \"define_flatten_layer\"},\r\n          {kind: \"block\", type: \"define_dropout_layer\"},\r\n          {kind: \"block\", type: \"fit_model\"},\r\n          {kind: \"block\", type: \"evaluate_model\"},\r\n          {kind: \"block\", type: \"predict_with_model\"},\r\n          {kind: \"block\", type: \"save_model\"},\r\n          {kind: \"block\", type: \"load_model\"},\r\n          {kind: \"block\", type: \"define_custom_layer\"},\r\n          {kind: \"block\", type: \"define_custom_loss_function\"},\r\n          {kind: \"block\", type: \"define_custom_metric_function\"},\r\n          {kind: \"block\", type: \"define_custom_activation_function\"},\r\n          {kind: \"block\", type: \"define_convolutional_layer\"},\r\n          {kind: \"block\", type: \"define_maxpooling_layer\"},\r\n          {kind: \"block\", type: \"define_flatten_layer\"},\r\n          {kind: \"block\", type: \"define_dropout_layer\"},\r\n          {kind: \"block\", type: \"define_lstm_layer\"},\r\n          {kind: \"block\", type: \"define_gru_layer\"},\r\n          {kind: \"block\", type: \"define_embedding_layer\"},\r\n          {kind: \"block\", type: \"define_custom_optimizer\"},\r\n        ],\r\n      },\r\n      \r\n      {\r\n        kind: \"category\",\r\n        \"name\": \"Numpy\",\r\n        \"colour\": \"#8A2BE2\",\r\n        \"contents\": [\r\n          {kind: \"block\", type: \"numpy_create_array\"},\r\n          {kind: \"block\", type: \"numpy_reshape_array\"},\r\n          {kind: \"block\", type: \"numpy_transpose_array\"},\r\n          {kind: \"block\", type: \"numpy_random_normal\"},\r\n          {kind: \"block\", type: \"numpy_random_uniform\"},\r\n          {kind: \"block\", type: \"numpy_random_choice\"},\r\n          {kind: \"block\", type: \"numpy_dot_product\"},\r\n          {kind: \"block\", type: \"numpy_concatenate_arrays\"},\r\n          {kind: \"block\", type: \"numpy_elementwise_addition\"},\r\n          {kind: \"block\", type: \"numpy_elementwise_subtraction\"},\r\n          {kind: \"block\", type: \"numpy_elementwise_multiplication\"},\r\n          {kind: \"block\", type: \"numpy_elementwise_division\"},\r\n          { kind: \"block\", type: \"numpy_mean\" },\r\n{ kind: \"block\", type: \"numpy_sum\" },\r\n{ kind: \"block\", type: \"numpy_max\" },\r\n{ kind: \"block\", type: \"numpy_min\" },\r\n{ kind: \"block\", type: \"numpy_std\" },\r\n{ kind: \"block\", type: \"numpy_var\" },\r\n{ kind: \"block\", type: \"numpy_sqrt\" },\r\n{ kind: \"block\", type: \"numpy_log\" },\r\n{ kind: \"block\", type: \"numpy_exp\" },\r\n{ kind: \"block\", type: \"numpy_abs\" },\r\n{ kind: \"block\", type: \"numpy_sin\" },\r\n{ kind: \"block\", type: \"numpy_cos\" },\r\n{ kind: \"block\", type: \"numpy_tan\" },\r\n{ kind: \"block\", type: \"numpy_arcsin\" },\r\n{ kind: \"block\", type: \"numpy_arccos\" },\r\n{ kind: \"block\", type: \"numpy_arctan\" },\r\n{ kind: \"block\", type: \"numpy_reshape_array\" },\r\n{ kind: \"block\", type: \"numpy_transpose_array\" },\r\n{ kind: \"block\", type: \"numpy_random_choice\" },\r\n{ kind: \"block\", type: \"numpy_dot_product\" },\r\n{ kind: \"block\", type: \"numpy_concatenate_arrays\" },\r\n{ kind: \"block\", type: \"numpy_matrix_multiplication\" },\r\n{ kind: \"block\", type: \"numpy_inverse\" },\r\n{ kind: \"block\", type: \"numpy_determinant\" },\r\n{ kind: \"block\", type: \"numpy_eigenvectors\" },\r\n{ kind: \"block\", type: \"numpy_eigenvalues\" },\r\n{ kind: \"block\", type: \"numpy_cross_product\" },\r\n{ kind: \"block\", type: \"numpy_cumulative_sum\" },\r\n{ kind: \"block\", type: \"numpy_sort\" },\r\n{ kind: \"block\", type: \"numpy_unique\" },\r\n{ kind: \"block\", type: \"numpy_argmin\" },\r\n{ kind: \"block\", type: \"numpy_argmax\" },\r\n{ kind: \"block\", type: \"numpy_bincount\" },\r\n{ kind: \"block\", type: \"numpy_histogram\" },\r\n{ kind: \"block\", type: \"numpy_diff\" },\r\n{ kind: \"block\", type: \"numpy_roll\" },\r\n{ kind: \"block\", type: \"numpy_flip\" },\r\n{ kind: \"block\", type: \"numpy_fill_diagonal\" }\r\n        ]\r\n      },\r\n      \r\n      {\r\n        kind: \"category\",\r\n        \"name\": \"NLTK\",\r\n        \"colour\": \"#4CAF50\",\r\n        \"contents\": [\r\n          { kind: \"block\", type: \"nltk_tokenize\" },\r\n          { kind: \"block\", type: \"nltk_pos_tag\" },\r\n          { kind: \"block\", type: \"nltk_sentiment_analysis\" },\r\n          { kind: \"block\", type: \"nltk_wordnet_synonyms\" },\r\n          { kind: \"block\", type: \"nltk_wordnet_antonyms\" },\r\n          { kind: \"block\", type: \"nltk_wordnet_hyponyms\" },\r\n          { kind: \"block\", type: \"nltk_wordnet_hypernyms\" },\r\n          { kind: \"block\", type: \"nltk_wordnet_definitions\" },\r\n    { kind: \"block\", type: \"nltk_wordnet_examples\" },\r\n    { kind: \"block\", type: \"nltk_wordnet_hypernyms_path\" },\r\n    { kind: \"block\", type: \"nltk_wordnet_hyponyms_path\" },\r\n    { kind: \"block\", type: \"nltk_wordnet_similar_words\" },\r\n    { kind: \"block\", type: \"nltk_wordnet_distance\" },\r\n    { kind: \"block\", type: \"nltk_wordnet_depth\" },\r\n    { kind: \"block\", type: \"nltk_wordnet_synonyms\" },\r\n    { kind: \"block\", type: \"nltk_wordnet_antonyms\" },\r\n    { kind: \"block\", type: \"nltk_wordnet_hypernyms\" },\r\n    { kind: \"block\", type: \"nltk_wordnet_hyponyms\" },\r\n    { kind: \"block\", type: \"nltk_wordnet_meronyms\" },\r\n    { kind: \"block\", type: \"nltk_wordnet_holonyms\" },\r\n    { kind: \"block\", type: \"nltk_tokenize_sentence\" },\r\n    { kind: \"block\", type: \"nltk_tokenize_words\" },\r\n    { kind: \"block\", type: \"nltk_tokenize_pos_tags\" },\r\n    { kind: \"block\", type: \"nltk_tokenize_chunks\" },\r\n    { kind: \"block\", type: \"nltk_lemmatize\" },\r\n    { kind: \"block\", type: \"nltk_stemming\" },\r\n    { kind: \"block\", type: \"nltk_stopwords_removal\" },\r\n    { kind: \"block\", type: \"nltk_ngrams\" },\r\n    { kind: \"block\", type: \"nltk_sentiment_analysis_vader\" },\r\n    { kind: \"block\", type: \"nltk_chunking\" },\r\n    { kind: \"block\", type: \"nltk_named_entity_recognition\" },\r\n    { kind: \"block\", type: \"nltk_word_similarity\" },\r\n    { kind: \"block\", type: \"nltk_concordance\" },\r\n    { kind: \"block\", type: \"nltk_frequencies\" },\r\n    { kind: \"block\", type: \"nltk_collocations\" }\r\n        ]\r\n      },\r\n      {\r\n        kind: \"category\",\r\n        \"name\": \"Scikit-learn\",\r\n        \"colour\": \"#FF5722\",\r\n        \"contents\": [\r\n          { kind: \"block\", type: \"sklearn_linear_regression\" },\r\n          { kind: \"block\", type: \"sklearn_logistic_regression\" },\r\n          { kind: \"block\", type: \"sklearn_decision_tree_classifier\" },\r\n          { kind: \"block\", type: \"sklearn_random_forest_classifier\" },\r\n          { kind: \"block\", type: \"sklearn_k_means_clustering\" },\r\n          { kind: \"block\", type: \"sklearn_pca\" },\r\n          { kind: \"block\", type: \"sklearn_svm_classifier\" },\r\n          { kind: \"block\", type: \"sklearn_naive_bayes\" },\r\n          { kind: \"block\", type: \"sklearn_grid_search\" },\r\n          { kind: \"block\", type: \"sklearn_gradient_boosting_classifier\" },\r\n          { kind: \"block\", type: \"sklearn_ada_boost_classifier\" },\r\n          { kind: \"block\", type: \"sklearn_nearest_neighbors\" },\r\n          { kind: \"block\", type: \"sklearn_linear_discriminant_analysis\" },\r\n          { kind: \"block\", type: \"sklearn_one_class_svm\" },\r\n          { kind: \"block\", type: \"sklearn_isolation_forest\" },\r\n          { kind: \"block\", type: \"sklearn_dbscan\" },\r\n          { kind: \"block\", type: \"sklearn_principal_component_analysis\" },\r\n          { kind: \"block\", type: \"sklearn_t_distributed_stochastic_neighbor_embedding\" },\r\n          { kind: \"block\", type: \"sklearn_label_propagation\" },\r\n          { kind: \"block\", type: \"sklearn_linear_svc\" }\r\n        ]\r\n      }\r\n,      \r\n  \r\n{\r\n  kind: \"category\",\r\n  \"name\": \"Django\",\r\n  \"colour\": \"#FF9800\",\r\n  \"contents\": [\r\n    { kind: \"block\", type: \"django_create_project\" },\r\n    { kind: \"block\", type: \"django_create_app\" },\r\n    { kind: \"block\", type: \"django_create_model\" },\r\n    { kind: \"block\", type: \"django_create_view\" },\r\n    { kind: \"block\", type: \"django_create_template\" },\r\n    { kind: \"block\", type: \"django_create_form\" },\r\n    { kind: \"block\", type: \"django_create_serializer\" },\r\n    { kind: \"block\", type: \"django_create_migration\" },\r\n    { kind: \"block\", type: \"django_runserver\" },\r\n    { kind: \"block\", type: \"django_makemigrations\" },\r\n    { kind: \"block\", type: \"django_migrate\" },\r\n    { kind: \"block\", type: \"django_createsuperuser\" },\r\n    { kind: \"block\", type: \"django_manage\" },\r\n    { kind: \"block\", type: \"django_collectstatic\" },\r\n    { kind: \"block\", type: \"django_test\" },\r\n    { kind: \"block\", type: \"django_shell\" },\r\n    { kind: \"block\", type: \"django_dumpdata\" },\r\n    { kind: \"block\", type: \"django_loaddata\" },\r\n    { kind: \"block\", type: \"django_create_admin\" },\r\n    { kind: \"block\", type: \"django_create_user\" },\r\n    { kind: \"block\", type: \"django_create_group\" },\r\n    { kind: \"block\", type: \"django_create_url\" },\r\n    { kind: \"block\", type: \"django_create_template_tag\" },\r\n    { kind: \"block\", type: \"django_create_management_command\" },\r\n    { kind: \"block\", type: \"django_create_middleware\" },\r\n    { kind: \"block\", type: \"django_create_signal\" },\r\n    { kind: \"block\", type: \"django_create_custom_field\" },\r\n    { kind: \"block\", type: \"django_create_admin_action\" },\r\n    { kind: \"block\", type: \"django_create_cache_middleware\" },\r\n    { kind: \"block\", type: \"django_create_authentication_backend\" },\r\n    { kind: \"block\", type: \"django_create_management_form\" },\r\n    { kind: \"block\", type: \"django_create_celery_task\" },\r\n    { kind: \"block\", type: \"django_create_rest_api\" }\r\n  ]\r\n},\r\n\r\n{\r\n  \"kind\": \"category\",\r\n  \"name\": \"Flask\",\r\n  \"colour\": \"#FF5733\",\r\n  \"contents\": [\r\n    {\"kind\": \"block\", \"type\": \"flask_create_app\"},\r\n    {\"kind\": \"block\", \"type\": \"flask_route\"},\r\n    {\"kind\": \"block\", \"type\": \"flask_render_template\"},\r\n    {\"kind\": \"block\", \"type\": \"flask_request\"},\r\n    {\"kind\": \"block\", \"type\": \"flask_response\"},\r\n    {\"kind\": \"block\", \"type\": \"flask_redirect\"},\r\n    {\"kind\": \"block\", \"type\": \"flask_abort\"},\r\n    {\"kind\": \"block\", \"type\": \"flask_sqlalchemy\"},\r\n    {\"kind\": \"block\", \"type\": \"flask_login\"},\r\n    {\"kind\": \"block\", \"type\": \"flask_wtf\"},\r\n    {\"kind\": \"block\", \"type\": \"flask_mail\"},\r\n    {\"kind\": \"block\", \"type\": \"flask_restful\"},\r\n    {\"kind\": \"block\", \"type\": \"flask_cors\"},\r\n    {\"kind\": \"block\", \"type\": \"flask_jwt_extended\"},\r\n    {\"kind\": \"block\", \"type\": \"flask_socketio\"},\r\n    {\"kind\": \"block\", \"type\": \"flask_marshmallow\"},\r\n    {\"kind\": \"block\", \"type\": \"flask_bcrypt\"},\r\n    {\"kind\": \"block\", \"type\": \"flask_redis\"},\r\n    {\"kind\": \"block\", \"type\": \"flask_migrate\"},\r\n    {\"kind\": \"block\", \"type\": \"flask_oauthlib\"},\r\n    {\"kind\": \"block\", \"type\": \"flask_restx\"},\r\n    {\"kind\": \"block\", \"type\": \"flask_debug_toolbar\"},\r\n    {\"kind\": \"block\", \"type\": \"flask_limiter\"},\r\n    {\"kind\": \"block\", \"type\": \"flask_pymongo\"},\r\n    {\"kind\": \"block\", \"type\": \"flask_login_manager\"},\r\n    {\"kind\": \"block\", \"type\": \"flask_simple_captcha\"},\r\n    {\"kind\": \"block\", \"type\": \"flask_cache\"},\r\n    {\"kind\": \"block\", \"type\": \"flask_apscheduler\"},\r\n    {\"kind\": \"block\", \"type\": \"flask_compress\"}\r\n  ]\r\n}\r\n,\r\n\r\n      {\r\n        kind: \"category\",\r\n        \"name\": \"Open CV\",\r\n        \"colour\": \"#00AEEF\",\r\n        \"contents\": [\r\n          { kind: \"block\", type: \"cv2_readimage\", colour: \"#6A5ACD\" },\r\n          { kind: \"block\", type: \"cv2_showimage\", \"colour\": \"#6A5ACD\" },\r\n          { kind: \"block\", type: \"cv2_waitkey\", \"colour\": \"#6A5ACD\" },\r\n          { kind: \"block\", type: \"cv2_destroyall\", \"colour\": \"#6A5ACD\" },\r\n          { kind: \"block\", type: \"cv2_imagewrite\", \"colour\": \"#6A5ACD\" },\r\n          { kind: \"block\", type: \"cv2_capturevideo\", \"colour\": \"#6A5ACD\" },\r\n          { kind: \"block\", type: \"cv2_videoread\", \"colour\": \"#6A5ACD\" },\r\n          { kind: \"block\", type: \"cv2_cap_release\", \"colour\": \"#6A5ACD\" },\r\n          { kind: \"block\", type: \"cv2_capturevideo_file\", \"colour\": \"#6A5ACD\" },\r\n          { kind: \"block\", type: \"cv2_waitkey2\", \"colour\": \"#6A5ACD\" },\r\n          { kind: \"block\", type: \"cv2_createimage\", \"colour\": \"#6A5ACD\" },\r\n          { kind: \"block\", type: \"cv2_drawline\", \"colour\": \"#6A5ACD\" },\r\n          { kind: \"block\", type: \"cv2_puttext\", \"colour\": \"#6A5ACD\" },\r\n          { kind: \"block\", type: \"cv2_roi\", \"colour\": \"#6A5ACD\" },\r\n          { kind: \"block\", type: \"cv2_roi_affect\", \"colour\": \"#6A5ACD\" },\r\n          { kind: \"block\", type: \"cv2_convertimage\", \"colour\": \"#6A5ACD\" },\r\n          { kind: \"block\", type: \"cv2_isopen\", \"colour\": \"#6A5ACD\" },\r\n          { kind: \"block\", type: \"cv2_imageprop\", \"colour\": \"#6A5ACD\" },\r\n          { kind: \"block\", type: \"cv2_imageadditionw\", \"colour\": \"#6A5ACD\" },\r\n          { kind: \"block\", type: \"cv2_gettick\", \"colour\": \"#6A5ACD\" },\r\n          { kind: \"block\", type: \"cv2_cascadeclassifier\", \"colour\": \"#6A5ACD\" },\r\n          { kind: \"block\", type: \"cv2_detectmultiscale_1p\", \"colour\": \"#6A5ACD\" },\r\n          { kind: \"block\", type: \"cv2_detectmultiscale_3p\", \"colour\": \"#6A5ACD\" },\r\n          { kind: \"block\", type: \"cv2_calculatediffpercentage\", \"colour\": \"#6A5ACD\" },\r\n          { kind: \"block\", type: \"qr_reader_decode\", \"colour\": \"#6A5ACD\" },\r\n          { kind: \"block\", type: \"qr_reader_data\", \"colour\": \"#6A5ACD\" },\r\n          { kind: \"block\", type: \"cv2_getproplist\", \"colour\": \"#6A5ACD\" },\r\n          { kind: \"block\", type: \"cv2_getpropnum\", \"colour\": \"#6A5ACD\" },\r\n          { kind: \"block\", type: \"cv2_Setproplist\", \"colour\": \"#6A5ACD\" },\r\n          { kind: \"block\", type: \"cv2_SetpropVal\", \"colour\": \"#6A5ACD\" },\r\n          { kind: \"block\", type: \"ocr_image_to_string\", \"colour\": \"#6A5ACD\" },\r\n          { kind: \"block\", type: \"capture_image_stream\", \"colour\": \"#6A5ACD\" }\r\n        ]\r\n      }\r\n      \r\n    ],\r\n  };\r\n\r\n  const handleModuleSelect = (index) => {\r\n    setSelectedModuleIndex(index);\r\n    setSelectedProject(null);\r\n    setIsVisible(false);\r\n  };\r\n\r\n  const handleProjectSelect = (project) => {\r\n    setSelectedProject(project);\r\n    setIsVisible(true);\r\n  };\r\n\r\n  const projectsData = selectedModuleIndex !== null ? modulesData[selectedModuleIndex].projects : [];\r\n\r\n  const toggleVisibility = () => setIsVisible(!isVisible); // Toggle visibility state\r\n\r\n\r\n  function workspaceDidChange(workspace) {\r\n    const code = Blockly.Python.workspaceToCode(workspace);\r\n    setJavascriptCode(code);\r\n  }\r\n\r\n  const handleFileInputChange = (event) => {\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        const xmlContent = reader.result;\r\n        loadWorkspaceFromXml(xmlContent);\r\n      };\r\n      reader.readAsText(file);\r\n    }\r\n  };\r\n  \r\n  const loadWorkspaceFromXml = (xmlContent) => {\r\n    try {\r\n      const xml = Blockly.Xml.textToDom(xmlContent);\r\n      Blockly.Xml.clearWorkspaceAndLoadFromXml(xml, BlocklyDuino.workspace);\r\n    } catch (error) {\r\n      console.error('Error loading XML:', error);\r\n      // Handle the error, e.g., show an alert to the user\r\n    }\r\n  };\r\n\r\n  // Function to handle opening the mini screen\r\n  const handleOpenButtonClick = () => {\r\n    setShowMiniScreen(!showMiniScreen); // Toggle the state of showMiniScreen\r\n  };\r\n\r\n\r\n  // Function to create a new workspace (reload the page)\r\n  const createNewWorkspace = () => {\r\n    window.location.reload(); // Reload the page\r\n  };\r\n\r\n \r\n {/* const handleSelectImage = (imageUrl) => {\r\n    console.log(\"Selected image URL:\", imageUrl);\r\n    // Ensure that the imageUrl is properly logged\r\n    setSelectedImage(imageUrl); // Assuming you have state for selectedImage\r\n  };\r\n \r\n// Function to create a new empty workspace\r\n{/*{const createNewWorkspace = () => {\r\n  setTimeout(() => {\r\n    const div = document.getElementById('blocklyDiv');\r\n    if (div) {\r\n      const newWorkspace = Blockly.inject(div, {\r\n        toolbox: document.getElementById('toolbox'),\r\n      });\r\n      setWorkspace(newWorkspace);\r\n    } else {\r\n      console.error(\"blocklyDiv element not found\");\r\n    }\r\n  }, 2000); // Delay in milliseconds\r\n};\r\n\r\n// Function to close the current workspace\r\nconst closeWorkspace = () => {\r\n  if (workspace) {\r\n    workspace.dispose(); // Dispose the current workspace\r\n    setWorkspace(null); // Reset workspace state to null\r\n  }\r\n};\r\n\r\nuseEffect(() => {\r\n  createNewWorkspace();\r\n}, []);*/}\r\n\r\n  const saveXmlFile = () => {\r\n    const blob = new Blob([xml], { type: 'application/xml' });\r\n    const link = document.createElement('a');\r\n    link.href = window.URL.createObjectURL(blob);\r\n    link.download = 'workspace.xml';\r\n    link.click();\r\n  };\r\n\r\n  const handleLogoutButtonClick = () => {\r\n    navigate(\"/\");\r\n  };\r\n\r\n  const savePyFile = (filename) => {\r\n    const pythonCode = javascriptCode; // assuming javascriptCode holds the Python code\r\n    const blob = new Blob([pythonCode], { type: 'text/plain' });\r\n    const link = document.createElement('a');\r\n    link.href = window.URL.createObjectURL(blob);\r\n    \r\n    if (typeof filename !== 'string') {\r\n        filename = 'python_code'; // Default filename if not provided or not a string\r\n    }\r\n\r\n    link.download = filename.endsWith('.py') ? filename : `${filename}.py`;\r\n    link.click();\r\n};\r\n\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n  document.getElementById('btn_saveino').addEventListener('click', function() {\r\n      savePyFile('my_python_code');\r\n  });\r\n});\r\n\r\n\r\n\r\n  \r\n  const copyToClipboard = () => {\r\n    const textarea = document.getElementById('code'); // Assuming 'code' is the ID of your textarea\r\n    textarea.select();\r\n    document.execCommand('copy');\r\n  };\r\n  \r\n  const takeScreenshot = () => {\r\n    const workspaceElement = workspaceRef.current ; // Replace with the actual class or ID of your BlocklyWorkspace\r\n  \r\n    if (workspaceElement) {\r\n      setTimeout(() => {\r\n        html2canvas(workspaceElement).then((canvas) => {\r\n          const screenshotUrl = canvas.toDataURL('image/png');\r\n          // Now you can save or display the screenshotUrl as needed\r\n          // For example, you can create a link to download the image\r\n          const link = document.createElement('a');\r\n          link.href = screenshotUrl;\r\n          link.download = 'workspace_screenshot.png';\r\n          link.click();\r\n        });\r\n      }, 200);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <input\r\n  type=\"file\"\r\n  id=\"fileInput\"\r\n  ref={fileInputRef} \r\n  style={{ display: 'none' }} // Hide the input element\r\n  onChange={handleFileInputChange}\r\n/>\r\n      <div>\r\n        <div>\r\n          <div className=\"div1\">\r\n            <table className=\"maintable\">\r\n              <tbody>\r\n                <tr>\r\n                  <td className=\"td1\">\r\n                    <div className=\"button-div\">\r\n                      <button title=\"New\" className=\"b01\" \r\n                      id=\"btn_new\"\r\n                      onClick={createNewWorkspace}\r\n                      ></button>\r\n                      \r\n                      <button\r\n                        onClick={() => setIsVisible(!isVisible)}\r\n                        title=\"Open\"\r\n                        className=\"b02\"\r\n                        id=\"btn_fakeload\"\r\n                      ></button>\r\n\r\n                      <button\r\n                        title=\"Save.xml\"\r\n                        className=\"b03\"\r\n                        id=\"btn_savexml\"\r\n                        onClick={saveXmlFile}\r\n                      ></button>\r\n                      <button\r\n                        id=\"btn_print\"\r\n                        title=\"Screenshot.png\"\r\n                        className=\"b04\"\r\n                        onClick={takeScreenshot}\r\n                      ></button>\r\n                     \r\n                      <button\r\n                        title=\"Arduino code preview\"\r\n                        className=\"b06\"\r\n                        id=\"btn_preview\"\r\n                        onClick={() => toggleModal()}\r\n                      ></button>\r\n                      <button\r\n                        title=\"Logout\"\r\n                        className=\"b07\"\r\n                        id=\"btn_logout\"\r\n                        onClick={handleLogoutButtonClick}\r\n                      ></button>\r\n                    </div>\r\n                  </td>\r\n                  <td className=\"td2\">\r\n                    <div className=\"logo-div\">\r\n                      <img className=\"logo-main\" alt=\"Code-Asthram-Logo\" src={logo} />\r\n                    </div>\r\n                  </td>\r\n                  <td>\r\n                  <ParentComponent\r\n        modulesData={modulesData}\r\n        selectedModuleIndex={selectedModuleIndex}\r\n        onSelectModule={handleModuleSelect}\r\n        projectsData={projectsData}\r\n        onSelectProject={handleProjectSelect}\r\n      />\r\n      {isVisible && selectedProject && (\r\n        <FloatingScreen\r\n          isVisible={isVisible}\r\n          toggleVisibility={() => setIsVisible(false)}\r\n          content={<img src={selectedProject.image} alt={selectedProject.name} style={{ width: '100%', height: 'auto' }} />}\r\n          hints={selectedProject.hints || []}\r\n        />\r\n      )}\r\n               {/*   <a className=\"projecthref\" href=\"https://canvas.instructure.com/courses/9304102\" target=\"_blank\">projects</a>\r\n*/}\r\n\r\n                 \r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n  \r\n        <BlocklyWorkspace\r\n          toolboxConfiguration={toolboxCategories}\r\n          initialXml={initialXml}\r\n          className=\"fill-height\"\r\n          workspaceConfiguration={{\r\n            grid: {\r\n              spacing: 20,\r\n              length: 3,\r\n              colour: \"#002244 \",\r\n              snap: true,\r\n            },\r\n          }}\r\n          onWorkspaceChange={workspaceDidChange}\r\n          onXmlChange={setXml}\r\n          style={{backgroundColor: \"#002244 \", border:\"none\"}}\r\n        >\r\n        <div\r\n    slot=\"toolbox\"\r\n    style={{ overflowY: 'auto', maxHeight: '100vh' }}\r\n  />\r\n  </BlocklyWorkspace>\r\n\r\n        <div id=\"toggle\" className=\"modal-content\" style={{ display: \"none\", top:\"80px\", bottom:\"100px\" }}>\r\n          <pre id=\"pre_previewArduino\">\r\n            <textarea\r\n              className=\"textarea\"\r\n              id=\"code\"\r\n              style={{\r\n                height: \"100%\",\r\n                width: \"100%\",\r\n                boxSizing: \"border-box\",\r\n                resize: \"none\",\r\n                border: \"none\"\r\n              }}\r\n              value={javascriptCode}\r\n              readOnly\r\n            ></textarea>\r\n          </pre>\r\n          <div id=\"btn_group\" class=\"btn-group\" role=\"group\">\r\n            <button\r\n              id=\"btn_saveino\"\r\n              class=\"btn btn-default\"\r\n              title=\"Save as .py\"\r\n              onClick={savePyFile}\r\n            >\r\n              <span class=\"fa fa-floppy-o\"> </span>\r\n            </button>\r\n            <button id=\"btn_copy\" class=\"btn btn-default\" \r\n            onClick={copyToClipboard}\r\n            title=\"Copy\">\r\n              <span class=\"fa fa-files-o\"> </span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n    {/* \r\n        {isVisible && selectedProject && (\r\n        <div className=\"floating-screen\">\r\n          <img src={selectedProject.image} alt={selectedProject.name} style={{ width: '100%', height: 'auto' }} />\r\n          <button onClick={toggleVisibility}>Close</button>\r\n        </div>\r\n      )}\r\n       \r\n    {/* Floating mini screen \r\n    {showMiniScreen && (\r\n        <div className=\"floating-mini-screen\">\r\n          {/* Content of the mini screen */}\r\n          {/* Here you can display media content such as images, videos, etc. \r\n          <img src=\"your_image_url.jpg\" alt=\"Media\" />\r\n          <video controls>\r\n            <source src=\"your_video_url.mp4\" type=\"video/mp4\" />\r\n            Your browser does not support the video tag.\r\n          </video>\r\n        </div>\r\n      )}\r\n    */}\r\n    </>\r\n  );\r\n}\r\n","D:\\tarcin\\code_asthram_dev\\frontend\\src\\dropDown.js",[],"D:\\tarcin\\code_asthram_dev\\frontend\\src\\scripts\\FloatingMiniScreen.js",[],"D:\\tarcin\\code_asthram_dev\\frontend\\src\\customBlocks\\openCv.js",[],"D:\\tarcin\\code_asthram_dev\\frontend\\src\\scripts\\ParentComponent.js",[],"D:\\tarcin\\code_asthram_dev\\frontend\\src\\customBlocks\\LogicBlocks.js",[],"D:\\tarcin\\code_asthram_dev\\frontend\\src\\customBlocks\\turtleBlocks.js",["148"],"import Blockly from 'blockly';\r\nimport 'blockly/python';\r\n\r\n\r\n// Define a custom block for creating a Turtle screen\r\nBlockly.Blocks['turtle_create_screen'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField('Create Turtle Screen');\r\n    this.setColour(\"#8B0000\");\r\n    this.setTooltip('Create a Turtle screen');\r\n    this.setPreviousStatement(false, null); // Remove previous statement connection\r\n    this.setNextStatement(true, null); // Allow next statement connection\r\n  }\r\n};\r\n\r\n// Define code generation for the custom block\r\nBlockly.Python['turtle_create_screen'] = function(block) {\r\n  Blockly.Python.definitions_['turtle'] = 'import turtle';\r\n  var pythonCode = 'screen = turtle.Screen()\\n';\r\n  return pythonCode;\r\n};\r\n\r\nBlockly.Blocks['turtle_ondrag'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Turtle ondrag\");\r\n    this.appendValueInput(\"FUNCTION\")\r\n        .setCheck(null)\r\n        .appendField(\"Function:\")\r\n        .appendField(new Blockly.FieldTextInput(\"my_function\"), \"DEFAULT_FUNCTION\");\r\n    this.setPreviousStatement(true, null);\r\n    this.setNextStatement(true, null);\r\n    this.setColour(\"#8B0000\");\r\n    this.setTooltip(\"Set a function to be called when the turtle is dragged\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n\r\nBlockly.Python['turtle_ondrag'] = function(block) {\r\n  var func = Blockly.Python.valueToCode(block, 'FUNCTION', Blockly.Python.ORDER_ATOMIC) || block.getFieldValue('DEFAULT_FUNCTION');\r\n  return 'turtle.ondrag(' + func + ')\\n';\r\n};\r\n\r\n\r\n\r\n\r\n\r\n// Define a custom block for setting the background color in Turtle with a default color\r\nBlockly.Blocks['turtle_set_background_color'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField('Set Background Color')\r\n        .appendField(new Blockly.FieldColour('#ffffff'), 'COLOR');\r\n    this.setPreviousStatement(true, null);\r\n    this.setNextStatement(true, null);\r\n    this.setColour(\"#8B0000\");\r\n    this.setTooltip('Set the background color in Turtle');\r\n    // Set default color\r\n    this.getField('COLOR').setValue('#ffffff');\r\n  }\r\n};\r\n\r\n// Define code generation for the custom block\r\nBlockly.Python['turtle_set_background_color'] = function(block) {\r\n  var colorValue = block.getFieldValue('COLOR');\r\n  Blockly.Python.definitions_['turtle'] = 'import turtle';\r\n  var pythonCode = `screen.bgcolor('${colorValue}')\\n`;\r\n  return pythonCode;\r\n};\r\n\r\n\r\n\r\n\r\n// Define a custom block with a dropdown for Turtle commands\r\nBlockly.Blocks['turtle_command'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField('Turtle command')\r\n        .appendField(new Blockly.FieldDropdown([\r\n          ['Forward', 'forward'],\r\n          ['Backward', 'backward'],\r\n          // Add more options as needed\r\n        ]), 'COMMAND');\r\n    this.appendValueInput('VALUE')\r\n        .setCheck('Number')\r\n        .appendField('by');\r\n    this.appendDummyInput()\r\n        .appendField('units');\r\n    this.setPreviousStatement(true, null);\r\n    this.setNextStatement(true, null);\r\n    this.setColour(\"#8B0000\");\r\n    this.setTooltip('Choose a Turtle command and specify the distance');\r\n  }\r\n};\r\n\r\n// Define a custom block for turtle.circle()\r\n// Define a custom block for turtle.circle()\r\nBlockly.Blocks['turtle_circle'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField('draw circle with radius')\r\n        .appendField(new Blockly.FieldNumber(50, 0), 'RADIUS')\r\n        .appendField('and shape');\r\n    this.appendDummyInput()\r\n        .appendField(new Blockly.FieldDropdown([\r\n          ['Classic', 'classic'],\r\n          ['Arrow', 'arrow'],\r\n          ['Circle', 'circle'],\r\n          ['Square', 'square'],\r\n          ['Triangle', 'triangle'],\r\n          // Add more options as needed\r\n        ]), 'SHAPE');\r\n    this.setPreviousStatement(true, null);\r\n    this.setNextStatement(true, null);\r\n    this.setColour(\"#8B0000\");\r\n    this.setTooltip('Draw a circle with a specified radius and shape');\r\n  }\r\n};\r\n\r\n\r\n\r\n// Define code generation for the custom block\r\n// Define code generation for the custom block\r\nBlockly.Python['turtle_circle'] = function(block) {\r\n  var radius = block.getFieldValue('RADIUS') || '50'; // Get the radius value from the block or use default '50'\r\n  var shape = block.getFieldValue('SHAPE');\r\n  Blockly.Python.definitions_['turtle'] = 'import turtle';\r\n  var pythonCode = `\\nturtle.circle(${radius}, '${shape}')\\n`;\r\n  return pythonCode;\r\n};\r\n\r\n\r\n\r\n// Define code generation for the custom block\r\nBlockly.Python['turtle_command'] = function(block) {\r\n  var command = block.getFieldValue('COMMAND');\r\n  var value = Blockly.Python.valueToCode(block, 'VALUE', Blockly.Python.ORDER_ATOMIC) || '0';\r\n  Blockly.Python.definitions_['turtle'] = 'import turtle';\r\n  var pythonCode = `\\nturtle.${command}(${value})\\n`;\r\n  return pythonCode;\r\n};\r\n\r\nBlockly.Blocks['turtle_turn'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n    .appendField('Turn')\r\n        .appendField(new Blockly.FieldDropdown([\r\n          ['Right', 'right'],\r\n          ['Left', 'left'],\r\n        ]), 'DIRECTION');\r\n    this.appendValueInput('DEGREES')\r\n        .setCheck('Number')\r\n        .appendField('by');\r\n    this.appendDummyInput()\r\n        .appendField('degrees');\r\n    this.setPreviousStatement(true, null);\r\n    this.setNextStatement(true, null);\r\n    this.setColour(\"#8B0000\");\r\n    this.setTooltip('Choose a Turtle turn direction and specify the degrees');\r\n  }\r\n};\r\n\r\nBlockly.Python['turtle_turn'] = function(block) {\r\n  var direction = block.getFieldValue('DIRECTION');\r\n  var degrees = Blockly.Python.valueToCode(block, 'DEGREES', Blockly.Python.ORDER_ATOMIC) || '0';\r\n  Blockly.Python.definitions_['turtle'] = 'import turtle';\r\n  var pythonCode = `\\nturtle.${direction}(${degrees})\\n`;\r\n  return pythonCode;\r\n};\r\n\r\nBlockly.Blocks['turtle_shape'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField('shape')\r\n        .appendField(new Blockly.FieldDropdown([\r\n          ['Turtle', 'turtle'],\r\n          ['Circle', 'circle'],\r\n          ['Classic', 'classic'],\r\n          ['Square', 'square'],\r\n          ['Triangle', 'triangle'],\r\n        ]), 'SHAPE');\r\n    this.setPreviousStatement(true, null);\r\n    this.setNextStatement(true, null);\r\n    this.setColour(\"#8B0000\");\r\n    this.setTooltip('Choose a Turtle shape');\r\n  }\r\n};\r\n\r\nBlockly.Python['turtle_shape'] = function(block) {\r\n  var shape = block.getFieldValue('SHAPE');\r\n  Blockly.Python.definitions_['turtle'] = 'import turtle';\r\n  var pythonCode = `\\nturtle.shape(\"${shape}\")\\n`;\r\n  return pythonCode;\r\n};\r\n\r\nBlockly.Blocks['turtle_pen'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField('pen')\r\n        .appendField(new Blockly.FieldDropdown([\r\n          ['up', 'penup'],\r\n          ['down', 'pendown'],\r\n        ]), 'PEN_STATE');\r\n    this.setPreviousStatement(true, null);\r\n    this.setNextStatement(true, null);\r\n    this.setColour(\"#8B0000\");\r\n    this.setTooltip('Set the pen state (up or down)');\r\n  }\r\n};\r\n\r\nBlockly.Python['turtle_pen'] = function(block) {\r\n  var penState = block.getFieldValue('PEN_STATE');\r\n  Blockly.Python.definitions_['turtle'] = 'import turtle';\r\n  var pythonCode = `\\nturtle.${penState}()\\n`;\r\n  return pythonCode;\r\n};\r\n\r\nBlockly.Blocks['turtle_color'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField('set color')\r\n        .appendField(new Blockly.FieldColour('#8B0000'), 'COLOR');\r\n    this.setPreviousStatement(true, null);\r\n    this.setNextStatement(true, null);\r\n    this.setColour(\"#8B0000\");\r\n    this.setTooltip('Set the pen color');\r\n  }\r\n};\r\n\r\nBlockly.Python['turtle_color'] = function(block) {\r\n  var colorValue = block.getFieldValue('COLOR');\r\n  Blockly.Python.definitions_['turtle'] = 'import turtle';\r\n  var pythonCode = `\\nturtle.color('${colorValue}')\\n`;\r\n  return pythonCode;\r\n};\r\n\r\nBlockly.Blocks['turtle_write'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField('Write');\r\n    this.appendDummyInput()\r\n        .appendField(new Blockly.FieldTextInput('Insert text'), 'CONTENT')\r\n        .setAlign(Blockly.ALIGN_RIGHT)\r\n        .appendField('text');\r\n    this.appendDummyInput()\r\n        .setAlign(Blockly.ALIGN_RIGHT)\r\n        .appendField('font size')\r\n        .appendField(new Blockly.FieldNumber(20, 1, 100), 'FONT_SIZE')\r\n        .appendField(new Blockly.FieldDropdown([['px', 'px'], ['pt', 'pt']]), 'FONT_UNIT');\r\n    this.appendDummyInput()\r\n        .setAlign(Blockly.ALIGN_RIGHT)\r\n        .appendField('font thickness')\r\n        .appendField(new Blockly.FieldDropdown([['Normal', 'normal'], ['Bold', 'bold']]), 'FONT_THICKNESS');\r\n    this.setPreviousStatement(true, null);\r\n    this.setNextStatement(true, null);\r\n    this.setColour(\"#8B0000\");\r\n    this.setTooltip('Write text with turtle');\r\n  }\r\n};\r\n\r\nBlockly.Python['turtle_write'] = function(block) {\r\n  var content = Blockly.Python.quote_(block.getFieldValue('CONTENT') || \"\");\r\n  var fontSize = block.getFieldValue('FONT_SIZE') || 20;\r\n  var fontUnit = block.getFieldValue('FONT_UNIT') || 'px';\r\n  var fontThickness = block.getFieldValue('FONT_THICKNESS') || 'normal';\r\n  Blockly.Python.definitions_['turtle'] = 'import turtle';\r\n  var pythonCode = `turtle.write(${content}, font=(\"Arial\", ${fontSize}, \"${fontThickness}\"))\\n`;\r\n  return pythonCode;\r\n};\r\n\r\n\r\n\r\n\r\nBlockly.Blocks['turtle_goto'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField('go to');\r\n    this.appendValueInput('X')\r\n        .setCheck('Number')\r\n        .setAlign(Blockly.ALIGN_RIGHT)\r\n        .appendField('X');\r\n    this.appendValueInput('Y')\r\n        .setCheck('Number')\r\n        .setAlign(Blockly.ALIGN_RIGHT)\r\n        .appendField('Y');\r\n    this.setPreviousStatement(true, null);\r\n    this.setNextStatement(true, null);\r\n    this.setColour(\"#8B0000\");\r\n    this.setTooltip('Move turtle to a specific position');\r\n  }\r\n};\r\n\r\nBlockly.Python['turtle_goto'] = function(block) {\r\n  var x = Blockly.Python.valueToCode(block, 'X', Blockly.Python.ORDER_ATOMIC) || 0;\r\n  var y = Blockly.Python.valueToCode(block, 'Y', Blockly.Python.ORDER_ATOMIC) || 0;\r\n  Blockly.Python.definitions_['turtle'] = 'import turtle';\r\n  var pythonCode = `\\nturtle.goto(${x}, ${y})\\n`;\r\n  return pythonCode;\r\n};\r\n\r\nBlockly.Blocks['turtle_pos'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField('get turtle position');\r\n    this.setOutput(true, null);\r\n    this.setColour(\"#8B0000\");\r\n    this.setTooltip('Get the current position of the turtle');\r\n  }\r\n};\r\n\r\nBlockly.Python['turtle_pos'] = function(block) {\r\n  Blockly.Python.definitions_['turtle'] = 'import turtle';\r\n  var pythonCode = '\\nturtle.pos()';\r\n  return [pythonCode, Blockly.Python.ORDER_ATOMIC];\r\n};\r\n\r\nBlockly.Blocks['turtle_stamp'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField('stamp turtle');\r\n    this.setPreviousStatement(true, null);\r\n    this.setNextStatement(true, null);\r\n    this.setColour(\"#8B0000\");\r\n    this.setTooltip('Stamp the turtle on the screen');\r\n  }\r\n};\r\n\r\nBlockly.Python['turtle_stamp'] = function(block) {\r\n  Blockly.Python.definitions_['turtle'] = 'import turtle';\r\n  var pythonCode = '\\nturtle.stamp()\\n';\r\n  return pythonCode;\r\n};\r\n\r\n// Define a custom block for turtle.done()\r\nBlockly.Blocks['turtle_done'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField('turtle done');\r\n    this.setPreviousStatement(true, null);\r\n    this.setNextStatement(true, null);\r\n    this.setColour(\"#8B0000\");\r\n    this.setTooltip('Keep the Turtle window open until closed by the user');\r\n  }\r\n};\r\n\r\n// Define code generation for the custom block\r\nBlockly.Python['turtle_done'] = function(block) {\r\n  Blockly.Python.definitions_['turtle'] = 'import turtle';\r\n  var pythonCode = '\\nturtle.done()\\n';\r\n  return pythonCode;\r\n};\r\n\r\n\r\nBlockly.Blocks['turtle_begin_fill'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField('begin fill');\r\n    this.setPreviousStatement(true, null);\r\n    this.setNextStatement(true, null);\r\n    this.setColour(\"#8B0000\");\r\n    this.setTooltip('Begin filling the shape with color');\r\n  }\r\n};\r\n\r\nBlockly.Python['turtle_begin_fill'] = function(block) {\r\n  Blockly.Python.definitions_['turtle'] = 'import turtle';\r\n  var pythonCode = '\\nturtle.begin_fill()\\n';\r\n  return pythonCode;\r\n};\r\n\r\nBlockly.Blocks['turtle_end_fill'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField('end fill');\r\n    this.setPreviousStatement(true, null);\r\n    this.setNextStatement(true, null);\r\n    this.setColour(\"#8B0000\");\r\n    this.setTooltip('End filling the shape with color');\r\n  }\r\n};\r\n\r\nBlockly.Python['turtle_end_fill'] = function(block) {\r\n  Blockly.Python.definitions_['turtle'] = 'import turtle';\r\n  var pythonCode = '\\nturtle.end_fill()\\n';\r\n  return pythonCode;\r\n};\r\n\r\nBlockly.Blocks['turtle_speed'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField('set turtle speed to')\r\n        .appendField(new Blockly.FieldDropdown([\r\n          ['slowest', '1'],\r\n          ['slow', '3'],\r\n          ['normal', '6'],\r\n          ['fast', '9'],\r\n          ['fastest', '0']\r\n        ]), 'SPEED');\r\n    this.setPreviousStatement(true, null);\r\n    this.setNextStatement(true, null);\r\n    this.setColour(\"#8B0000\");\r\n    this.setTooltip('Set turtle speed');\r\n  }\r\n};\r\n\r\nBlockly.Python['turtle_speed'] = function(block) {\r\n  var speed = block.getFieldValue('SPEED');\r\n  Blockly.Python.definitions_['turtle'] = 'import turtle';\r\n  return 'turtle.speed(' + speed + ')\\n';\r\n};\r\n","D:\\tarcin\\code_asthram_dev\\frontend\\src\\customBlocks\\fileHandling.js",[],"D:\\tarcin\\code_asthram_dev\\frontend\\src\\customBlocks\\systemFunctions.js",[],"D:\\tarcin\\code_asthram_dev\\frontend\\src\\customBlocks\\plotting.js",[],"D:\\tarcin\\code_asthram_dev\\frontend\\src\\customBlocks\\Sorting.js",["149","150","151","152","153","154","155"],"import Blockly from 'blockly';\r\nimport 'blockly/python';\r\n\r\n// Initialize the array block\r\nBlockly.Blocks['initialize_array'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Initialize array\")\r\n        .appendField(new Blockly.FieldVariable(\"arr\"), \"ARR\")\r\n        .appendField(\"with size\");\r\n    this.appendValueInput(\"SIZE\")\r\n        .setCheck(\"Number\");\r\n    this.setPreviousStatement(true, null);\r\n    this.setNextStatement(true, null);\r\n    this.setColour(\"#EEDFCC\");\r\n    this.setTooltip(\"Initialize an array with the given size.\");\r\n  }\r\n};\r\n\r\n// Blockly Python code for initializing the array\r\nBlockly.Python['initialize_array'] = function(block) {\r\n  var array = Blockly.Python.variableDB_.getName(block.getFieldValue('ARR'), Blockly.Variables.NAME_TYPE);\r\n  var size = Blockly.Python.valueToCode(block, 'SIZE', Blockly.Python.ORDER_ATOMIC);\r\n  return array + ' = [' + '0' + '] * ' + size + '\\n';\r\n};\r\n  \r\n// Set List Element\r\nBlockly.Blocks['set_list_element'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Set element\")\r\n        .appendField(new Blockly.FieldVariable(\"arr\"), \"LIST\")\r\n        .appendField(\"at index\");\r\n    this.appendValueInput(\"INDEX\")\r\n        .setCheck(\"Number\");\r\n    this.appendValueInput(\"VALUE\")\r\n        .setCheck(\"Number\")\r\n        .appendField(\"to\");\r\n    this.setInputsInline(true);\r\n    this.setPreviousStatement(true, null);\r\n    this.setNextStatement(true, null);\r\n    this.setColour(\"#EEDFCC\");\r\n    this.setTooltip(\"Set an element in the list at the specified index.\");\r\n  }\r\n};\r\n\r\n// Set List Element\r\nBlockly.Python['set_list_element'] = function(block) {\r\n  var list = Blockly.Python.variableDB_.getName(block.getFieldValue('LIST'), Blockly.Variables.NAME_TYPE);\r\n  var index = Blockly.Python.valueToCode(block, 'INDEX', Blockly.Python.ORDER_ATOMIC);\r\n  var value = Blockly.Python.valueToCode(block, 'VALUE', Blockly.Python.ORDER_ATOMIC);\r\n  return list + '[' + index + '] = ' + value + '\\n';\r\n};\r\n\r\n// Bubble Sort Logic\r\nBlockly.Blocks['bubble_sort_logic'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Bubble Sort Logic\");\r\n    this.appendStatementInput(\"CODE\")\r\n        .setCheck(null);\r\n    this.setPreviousStatement(true, null);\r\n    this.setNextStatement(true, null);\r\n    this.setColour(\"#EEDFCC\");\r\n    this.setTooltip(\"Bubble Sort logic.\");\r\n  }\r\n};\r\n\r\n\r\n// Bubble Sort Logic\r\nBlockly.Python['bubble_sort_logic'] = function(block) {\r\n  var code = Blockly.Python.statementToCode(block, 'CODE');\r\n  return code;\r\n};\r\n\r\n// For loop block\r\nBlockly.Blocks['for_loop'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"For\")\r\n        .appendField(new Blockly.FieldVariable(\"i\"), \"VAR\")  // Use unique names for each loop variable\r\n        .appendField(\"in range\");\r\n    this.appendValueInput(\"START\")\r\n        .setCheck(\"Number\");\r\n    this.appendValueInput(\"END\")\r\n        .setCheck(\"Number\")\r\n        .appendField(\"to\");\r\n    this.appendValueInput(\"STEP\")\r\n        .setCheck(\"Number\")\r\n        .appendField(\"step\");\r\n    this.appendStatementInput(\"STATEMENTS\")\r\n        .setCheck(null);\r\n    this.setPreviousStatement(true, null);\r\n    this.setNextStatement(true, null);\r\n    this.setColour(\"#EEDFCC\");\r\n    this.setTooltip(\"For loop with specified range and step size.\");\r\n  }\r\n};\r\n\r\n// Blockly Python code for the for loop\r\nBlockly.Python['for_loop'] = function(block) {\r\n  var variable = Blockly.Python.variableDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\r\n  var start = Blockly.Python.valueToCode(block, 'START', Blockly.Python.ORDER_ATOMIC);\r\n  var end = Blockly.Python.valueToCode(block, 'END', Blockly.Python.ORDER_ATOMIC);\r\n  var step = Blockly.Python.valueToCode(block, 'STEP', Blockly.Python.ORDER_ATOMIC);\r\n  var statements = Blockly.Python.statementToCode(block, 'STATEMENTS');\r\n  return 'for ' + variable + ' in range(' + start + ', ' + end + ', ' + step + '):\\n' + statements + '\\n';\r\n};\r\n  \r\n  \r\n// Swap Elements\r\nBlockly.Blocks['swap_elements'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Swap elements\")\r\n        .appendField(new Blockly.FieldVariable(\"arr\"), \"LIST\")\r\n        .appendField(\"at indices\");\r\n    this.appendValueInput(\"INDEX1\")\r\n        .setCheck(\"Number\");\r\n    this.appendValueInput(\"INDEX2\")\r\n        .setCheck(\"Number\")\r\n        .appendField(\"and\");\r\n    this.setInputsInline(true);\r\n    this.setPreviousStatement(true, null);\r\n    this.setNextStatement(true, null);\r\n    this.setColour(\"#EEDFCC\");\r\n    this.setTooltip(\"Swap elements in the list at the specified indices.\");\r\n  }\r\n};\r\n\r\nBlockly.Python['swap_elements'] = function(block) {\r\n  var list = Blockly.Python.variableDB_.getName(block.getFieldValue('LIST'), Blockly.Variables.NAME_TYPE);\r\n  var index1 = Blockly.Python.valueToCode(block, 'INDEX1', Blockly.Python.ORDER_ATOMIC);\r\n  var index2 = Blockly.Python.valueToCode(block, 'INDEX2', Blockly.Python.ORDER_ATOMIC);\r\n  return list + '[' + index1 + '], ' + list + '[' + index2 + '] = ' + list + '[' + index2 + '], ' + list + '[' + index1 + ']\\n';\r\n};\r\n\r\n\r\n// Return Statement\r\nBlockly.Blocks['return_statement'] = {\r\n  init: function() {\r\n    this.appendValueInput(\"VALUE\")\r\n        .setCheck(null)\r\n        .appendField(\"return\");\r\n    this.setInputsInline(true);\r\n    this.setPreviousStatement(true, null);\r\n    this.setColour(\"#EEDFCC\");\r\n    this.setTooltip(\"Return statement\");\r\n  }\r\n};\r\n  \r\n// Return Statement\r\nBlockly.Python['return_statement'] = function(block) {\r\n  var value = Blockly.Python.valueToCode(block, 'VALUE', Blockly.Python.ORDER_NONE) || '';\r\n  return 'return ' + value + '\\n';\r\n};\r\n\r\nBlockly.Blocks['if_statement'] = {\r\n  init: function() {\r\n    this.appendValueInput('CONDITION')\r\n        .setCheck('Boolean')\r\n        .appendField('if');\r\n    this.appendStatementInput('DO')\r\n        .appendField('do');\r\n    this.setPreviousStatement(true, null);\r\n    this.setColour(\"#EEDFCC\");\r\n    this.setTooltip('If Statement');\r\n    this.setNextStatement(true, null); // Add bottom connection bump\r\n  }\r\n};\r\n\r\n  \r\n  Blockly.Python['if_statement'] = function(block) {\r\n  var condition = Blockly.Python.valueToCode(block, 'CONDITION', Blockly.Python.ORDER_NONE) || 'False';\r\n  var statements = Blockly.Python.statementToCode(block, 'DO');\r\n  var code = 'if ' + condition + ':\\n' + statements;\r\n  return code;\r\n  };\r\n  \r\n  \r\n  \r\n  \r\nBlockly.Blocks['bubble_sort'] = {\r\n    init: function() {\r\n      this.appendDummyInput()\r\n          .appendField(\"Bubble Sort\");\r\n      this.appendValueInput(\"LIST\")\r\n          .setCheck(\"Array\")\r\n          .appendField(\"List\");\r\n      this.setPreviousStatement(true, null);\r\n      this.setNextStatement(true, null);\r\n      this.setColour(\"#EEDFCC\");\r\n      this.setTooltip(\"Sort an array using Bubble Sort.\");\r\n      this.setNextStatement(true, null); // Add bottom connection bump\r\n    }\r\n  };\r\n  \r\n\r\n  Blockly.Python['bubble_sort'] = function(block) {\r\n    var list = Blockly.Python.valueToCode(block, 'LIST', Blockly.Python.ORDER_ATOMIC);\r\n    var code = 'arr = ' + list + '\\n';  // Fixing the assignment syntax\r\n    code += 'sorted_arr = bubble_sort(arr[:])\\n';\r\n    code += 'def bubble_sort(arr):\\n';\r\n    code += '    n = len(arr)\\n';\r\n    code += '    for i in range(n):\\n';\r\n    code += '        for j in range(0, n-i-1):\\n';\r\n    code += '            if arr[j] > arr[j+1]:\\n';\r\n    code += '                arr[j], arr[j+1] = arr[j+1], arr[j]\\n';\r\n    code += '    return arr\\n';\r\n    return code;\r\n  };\r\n  \r\n\r\n  //insertion sort  \r\n  Blockly.Blocks['insertion_sort_logic'] = {\r\n    init: function() {\r\n      this.appendDummyInput()\r\n          .appendField(\"Insertion Sort Logic\");\r\n      this.appendStatementInput(\"CODE\")\r\n          .setCheck(null);\r\n      this.setPreviousStatement(true, null);\r\n      this.setNextStatement(true, null);\r\n      this.setColour(\"#EEDFCC\");\r\n      this.setTooltip(\"Insertion Sort logic.\");\r\n    }\r\n  };\r\n  \r\n  Blockly.Python['insertion_sort_logic'] = function(block) {\r\n    var code = Blockly.Python.statementToCode(block, 'CODE');\r\n    return 'def insertion_sort(arr):\\n' + code + '\\n';\r\n  };\r\n  \r\n  Blockly.Blocks['compare_elements'] = {\r\n    init: function() {\r\n      this.appendDummyInput()\r\n          .appendField(\"Compare elements\")\r\n          .appendField(new Blockly.FieldVariable(\"arr\"), \"LIST\")\r\n          .appendField(\"at indices\");\r\n      this.appendValueInput(\"INDEX1\")\r\n          .setCheck(\"Number\");\r\n      this.appendValueInput(\"INDEX2\")\r\n          .setCheck(\"Number\")\r\n          .appendField(\"and\");\r\n      this.setInputsInline(true);\r\n      this.setOutput(true, \"Boolean\");\r\n      this.setColour(\"#EEDFCC\");\r\n      this.setTooltip(\"Compare elements in the list at the specified indices.\");\r\n    }\r\n  };\r\n\r\n  Blockly.Python['compare_elements'] = function(block) {\r\n    var list = Blockly.Python.variableDB_.getName(block.getFieldValue('LIST'), Blockly.Variables.NAME_TYPE);\r\n    var index1 = Blockly.Python.valueToCode(block, 'INDEX1', Blockly.Python.ORDER_ATOMIC);\r\n    var index2 = Blockly.Python.valueToCode(block, 'INDEX2', Blockly.Python.ORDER_ATOMIC);\r\n    return list + '[' + index1 + '] < ' + list + '[' + index2 + ']';\r\n  };\r\n  \r\n  \r\n  \r\n  Blockly.Blocks['insertion_sort'] = {\r\n    init: function() {\r\n      this.appendValueInput(\"LIST\")\r\n          .setCheck(\"Array\")\r\n          .appendField(\"Insertion Sort\");\r\n      this.setOutput(true, \"Array\");\r\n      this.setColour(\"#EEDFCC\");\r\n      this.setTooltip(\"Sort an array using Insertion Sort.\");\r\n    }\r\n  };\r\n  \r\n  Blockly.Python['insertion_sort'] = function(block) {\r\n    var list = Blockly.Python.valueToCode(block, 'LIST', Blockly.Python.ORDER_ATOMIC);\r\n    var code = 'def insertion_sort(arr):\\n';\r\n    code += '    for i in range(1, len(arr)):\\n';\r\n    code += '        key = arr[i]\\n';\r\n    code += '        j = i-1\\n';\r\n    code += '        while j >=0 and key < arr[j] :\\n';\r\n    code += '                arr[j+1] = arr[j]\\n';\r\n    code += '                j -= 1\\n';\r\n    code += '        arr[j+1] = key\\n';\r\n    code += '    return arr\\n';\r\n    code += list + ' = insertion_sort(' + list + '[:])\\n';\r\n    return [code, Blockly.Python.ORDER_NONE];\r\n  };\r\n  \r\n//merge sort\r\n\r\nBlockly.Blocks['merge_sort_logic'] = {\r\n    init: function() {\r\n      this.appendDummyInput()\r\n          .appendField(\"Merge Sort Logic\");\r\n      this.appendStatementInput(\"CODE\")\r\n          .setCheck(null);\r\n      this.setPreviousStatement(true, null);\r\n      this.setNextStatement(true, null);\r\n      this.setColour(\"#EEDFCC\");\r\n      this.setTooltip(\"Merge Sort logic.\");\r\n    }\r\n  };\r\n  \r\n  Blockly.Python['merge_sort_logic'] = function(block) {\r\n    var code = Blockly.Python.statementToCode(block, 'CODE');\r\n    return 'def merge_sort(arr):\\n' + code + '\\n';\r\n  };\r\n  \r\n  Blockly.Blocks['merge'] = {\r\n    init: function() {\r\n      this.appendDummyInput()\r\n          .appendField(\"Merge\")\r\n          .appendField(new Blockly.FieldVariable(\"arr\"), \"ARRAY\")\r\n          .appendField(\"from indices\");\r\n      this.appendValueInput(\"START1\")\r\n          .setCheck(\"Number\");\r\n      this.appendValueInput(\"END1\")\r\n          .setCheck(\"Number\")\r\n          .appendField(\"to\");\r\n      this.appendValueInput(\"START2\")\r\n          .setCheck(\"Number\")\r\n          .appendField(\"and\");\r\n      this.appendValueInput(\"END2\")\r\n          .setCheck(\"Number\")\r\n          .appendField(\"to\");\r\n      this.setInputsInline(true);\r\n      this.setOutput(true, \"Array\");\r\n      this.setColour(\"#EEDFCC\");\r\n      this.setTooltip(\"Merge two sorted subarrays into a single sorted array.\");\r\n    }\r\n  };\r\n  \r\n  Blockly.Python['merge'] = function(block) {\r\n    var array = Blockly.Python.variableDB_.getName(block.getFieldValue('ARRAY'), Blockly.Variables.NAME_TYPE);\r\n    var start1 = Blockly.Python.valueToCode(block, 'START1', Blockly.Python.ORDER_ATOMIC);\r\n    var end1 = Blockly.Python.valueToCode(block, 'END1', Blockly.Python.ORDER_ATOMIC);\r\n    var start2 = Blockly.Python.valueToCode(block, 'START2', Blockly.Python.ORDER_ATOMIC);\r\n    var end2 = Blockly.Python.valueToCode(block, 'END2', Blockly.Python.ORDER_ATOMIC);\r\n    return array + '[' + start1 + ':' + end1 + '] + ' + array + '[' + start2 + ':' + end2 + ']';\r\n  };\r\n  \r\n \r\n  Blockly.Blocks['merge_sort'] = {\r\n    init: function() {\r\n      this.appendValueInput(\"LIST\")\r\n          .setCheck(\"Array\")\r\n          .appendField(\"Merge Sort\");\r\n      this.setOutput(true, \"Array\");\r\n      this.setColour(\"#EEDFCC\");\r\n      this.setTooltip(\"Sort an array using Merge Sort.\");\r\n    }\r\n  };\r\n\r\n  Blockly.Python['merge_sort'] = function(block) {\r\n    var list = Blockly.Python.valueToCode(block, 'LIST', Blockly.Python.ORDER_ATOMIC);\r\n    var code = 'def merge_sort(arr):\\n';\r\n    code += '    if len(arr) > 1:\\n';\r\n    code += '        mid = len(arr)//2\\n';\r\n    code += '        L = arr[:mid]\\n';\r\n    code += '        R = arr[mid:]\\n';\r\n    code += '        merge_sort(L)\\n';\r\n    code += '        merge_sort(R)\\n';\r\n    code += '        i = j = k = 0\\n';\r\n    code += '        while i < len(L) and j < len(R):\\n';\r\n    code += '            if L[i] < R[j]:\\n';\r\n    code += '                arr[k] = L[i]\\n';\r\n    code += '                i += 1\\n';\r\n    code += '            else:\\n';\r\n    code += '                arr[k] = R[j]\\n';\r\n    code += '                j += 1\\n';\r\n    code += '            k += 1\\n';\r\n    code += '        while i < len(L):\\n';\r\n    code += '            arr[k] = L[i]\\n';\r\n    code += '            i += 1\\n';\r\n    code += '            k += 1\\n';\r\n    code += '        while j < len(R):\\n';\r\n    code += '            arr[k] = R[j]\\n';\r\n    code += '            j += 1\\n';\r\n    code += '            k += 1\\n';\r\n    code += '    return arr\\n';\r\n    code += list + ' = merge_sort(' + list + '[:])\\n';\r\n    return [code, Blockly.Python.ORDER_NONE];\r\n  };\r\n  \r\n  //quick sort\r\n\r\n  Blockly.Blocks['quick_sort_logic'] = {\r\n    init: function() {\r\n      this.appendDummyInput()\r\n          .appendField(\"Quick Sort Logic\");\r\n      this.appendStatementInput(\"CODE\")\r\n          .setCheck(null);\r\n      this.setPreviousStatement(true, null);\r\n      this.setNextStatement(true, null);\r\n      this.setColour(\"#EEDFCC\");\r\n      this.setTooltip(\"Quick Sort logic.\");\r\n    }\r\n  };\r\n\r\n  Blockly.Python['quick_sort_logic'] = function(block) {\r\n    var code = Blockly.Python.statementToCode(block, 'CODE');\r\n    return 'def quick_sort(arr):\\n' + code + '\\n';\r\n  };\r\n\r\n  Blockly.Blocks['partition'] = {\r\n    init: function() {\r\n      this.appendDummyInput()\r\n          .appendField(\"Partition\")\r\n          .appendField(new Blockly.FieldVariable(\"arr\"), \"ARRAY\")\r\n          .appendField(\"around pivot\");\r\n      this.appendValueInput(\"PIVOT\")\r\n          .setCheck(\"Number\");\r\n      this.setInputsInline(true);\r\n      this.setOutput(true, \"Array\");\r\n      this.setColour(\"#EEDFCC\");\r\n      this.setTooltip(\"Partition the array into two subarrays around a pivot element.\");\r\n    }\r\n  };\r\n\r\n  Blockly.Python['partition'] = function(block) {\r\n    var array = Blockly.Python.variableDB_.getName(block.getFieldValue('ARRAY'), Blockly.Variables.NAME_TYPE);\r\n    var pivot = Blockly.Python.valueToCode(block, 'PIVOT', Blockly.Python.ORDER_ATOMIC);\r\n    // Code to partition the array around the pivot\r\n    return '...'; // Placeholder code\r\n  };\r\n\r\n  Blockly.Blocks['combine'] = {\r\n    init: function() {\r\n      this.appendDummyInput()\r\n          .appendField(\"Combine\")\r\n          .appendField(new Blockly.FieldVariable(\"left\"), \"LEFT\")\r\n          .appendField(\"and\")\r\n          .appendField(new Blockly.FieldVariable(\"right\"), \"RIGHT\")\r\n          .appendField(\"with pivot\");\r\n      this.appendValueInput(\"PIVOT\")\r\n          .setCheck(\"Number\");\r\n      this.setInputsInline(true);\r\n      this.setOutput(true, \"Array\");\r\n      this.setColour(\"#EEDFCC\");\r\n      this.setTooltip(\"Combine sorted subarrays with a pivot element.\");\r\n    }\r\n  };\r\n\r\n  Blockly.Python['combine'] = function(block) {\r\n    var leftArray = Blockly.Python.variableDB_.getName(block.getFieldValue('LEFT'), Blockly.Variables.NAME_TYPE);\r\n    var rightArray = Blockly.Python.variableDB_.getName(block.getFieldValue('RIGHT'), Blockly.Variables.NAME_TYPE);\r\n    var pivot = Blockly.Python.valueToCode(block, 'PIVOT', Blockly.Python.ORDER_ATOMIC);\r\n    // Code to combine the sorted subarrays with the pivot\r\n    return '...'; // Placeholder code\r\n  };\r\n  \r\n\r\n  Blockly.Blocks['quick_sort'] = {\r\n    init: function() {\r\n      this.appendValueInput(\"LIST\")\r\n          .setCheck(\"Array\")\r\n          .appendField(\"Quick Sort\");\r\n      this.setOutput(true, \"Array\");\r\n      this.setColour(\"#EEDFCC\");\r\n      this.setTooltip(\"Sort an array using Quick Sort.\");\r\n    }\r\n  };\r\n\r\n  Blockly.Python['quick_sort'] = function(block) {\r\n    var list = Blockly.Python.valueToCode(block, 'LIST', Blockly.Python.ORDER_ATOMIC);\r\n    var code = 'def quick_sort(arr):\\n';\r\n    code += '    if len(arr) <= 1:\\n';\r\n    code += '        return arr\\n';\r\n    code += '    pivot = arr[len(arr)//2]\\n';\r\n    code += '    left = [x for x in arr if x < pivot]\\n';\r\n    code += '    middle = [x for x in arr if x == pivot]\\n';\r\n    code += '    right = [x for x in arr if x > pivot]\\n';\r\n    code += '    return quick_sort(left) + middle + quick_sort(right)\\n';\r\n    code += list + ' = quick_sort(' + list + '[:])\\n';\r\n    return [code, Blockly.Python.ORDER_NONE];\r\n  };\r\n  \r\n  ","D:\\tarcin\\code_asthram_dev\\frontend\\src\\customBlocks\\Pandas.js",[],"D:\\tarcin\\code_asthram_dev\\frontend\\src\\customBlocks\\Structure.js",[],"D:\\tarcin\\code_asthram_dev\\frontend\\src\\customBlocks\\Variable.js",[],"D:\\tarcin\\code_asthram_dev\\frontend\\src\\customBlocks\\Functions.js",[],"D:\\tarcin\\code_asthram_dev\\frontend\\src\\customBlocks\\scikit.js",[],"D:\\tarcin\\code_asthram_dev\\frontend\\src\\customBlocks\\nltk.js",[],"D:\\tarcin\\code_asthram_dev\\frontend\\src\\customBlocks\\numPy.js",[],"D:\\tarcin\\code_asthram_dev\\frontend\\src\\customBlocks\\tensorFlow.js",[],"D:\\tarcin\\code_asthram_dev\\frontend\\src\\customBlocks\\Flask.js",[],"D:\\tarcin\\code_asthram_dev\\frontend\\src\\customBlocks\\Django.js",["156"],"import Blockly from \"blockly\";\r\nimport \"blockly/python\";\r\n\r\n// Blockly Blocks\r\nBlockly.Blocks['django_create_project'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Create Django Project\");\r\n    this.appendValueInput(\"project_name\")\r\n        .setCheck(\"String\")\r\n        .setAlign(Blockly.ALIGN_RIGHT)\r\n        .appendField(\"Project Name\");\r\n    this.setColour(160);\r\n    this.setTooltip(\"Creates a new Django project.\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n\r\nBlockly.Blocks['django_create_app'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Create Django App\");\r\n    this.appendValueInput(\"app_name\")\r\n        .setCheck(\"String\")\r\n        .setAlign(Blockly.ALIGN_RIGHT)\r\n        .appendField(\"App Name\");\r\n    this.setColour(160);\r\n    this.setTooltip(\"Creates a new Django application within the project.\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n\r\nBlockly.Blocks['django_create_model'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Create Django Model\");\r\n    this.appendValueInput(\"model_name\")\r\n        .setCheck(\"String\")\r\n        .setAlign(Blockly.ALIGN_RIGHT)\r\n        .appendField(\"Model Name\");\r\n    this.setColour(160);\r\n    this.setTooltip(\"Creates a new model in Django ORM.\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n\r\n\r\n  // Blockly Python\r\n  Blockly.Python['django_create_project'] = function(block) {\r\n    var value_project_name = Blockly.Python.valueToCode(block, 'project_name', Blockly.Python.ORDER_ATOMIC);\r\n    // Generate Python code for creating a Django project\r\n    var code = 'django-admin startproject ' + value_project_name + '\\n';\r\n    return code;\r\n  };\r\n  \r\n  Blockly.Python['django_create_app'] = function(block) {\r\n    var value_app_name = Blockly.Python.valueToCode(block, 'app_name', Blockly.Python.ORDER_ATOMIC);\r\n    // Generate Python code for creating a Django app\r\n    var code = 'python manage.py startapp ' + value_app_name + '\\n';\r\n    return code;\r\n  };\r\n  \r\n  Blockly.Python['django_create_model'] = function(block) {\r\n    var value_model_name = Blockly.Python.valueToCode(block, 'model_name', Blockly.Python.ORDER_ATOMIC);\r\n    // Generate Python code for creating a Django model\r\n    var code = 'python manage.py startapp ' + value_model_name + '\\n';\r\n    return code;\r\n  };\r\n  \r\n  // Add Python code for other Django modules here\r\n\r\n // Blockly Blocks\r\nBlockly.Blocks['django_create_view'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Create Django View\");\r\n    this.appendValueInput(\"view_name\")\r\n        .setCheck(\"String\")\r\n        .setAlign(Blockly.ALIGN_RIGHT)\r\n        .appendField(\"View Name\");\r\n    this.setColour(160);\r\n    this.setTooltip(\"Creates a new view in Django.\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n\r\nBlockly.Blocks['django_create_template'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Create Django Template\");\r\n    this.appendValueInput(\"template_name\")\r\n        .setCheck(\"String\")\r\n        .setAlign(Blockly.ALIGN_RIGHT)\r\n        .appendField(\"Template Name\");\r\n    this.setColour(160);\r\n    this.setTooltip(\"Creates a new template file in Django.\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n\r\nBlockly.Blocks['django_create_form'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Create Django Form\");\r\n    this.appendValueInput(\"form_name\")\r\n        .setCheck(\"String\")\r\n        .setAlign(Blockly.ALIGN_RIGHT)\r\n        .appendField(\"Form Name\");\r\n    this.setColour(160);\r\n    this.setTooltip(\"Creates a new form in Django forms.\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n\r\n  \r\n  // Blockly Python\r\n  Blockly.Python['django_create_view'] = function(block) {\r\n    var value_view_name = Blockly.Python.valueToCode(block, 'view_name', Blockly.Python.ORDER_ATOMIC);\r\n    // Generate Python code for creating a Django view\r\n    var code = 'def ' + value_view_name + '(request):\\n';\r\n    code += Blockly.Python.INDENT + '# Your view code here\\n';\r\n    return code;\r\n  };\r\n  \r\n  Blockly.Python['django_create_template'] = function(block) {\r\n    var value_template_name = Blockly.Python.valueToCode(block, 'template_name', Blockly.Python.ORDER_ATOMIC);\r\n    // Generate Python code for creating a Django template\r\n    var code = '{% extends \"base.html\" %}\\n\\n';\r\n    code += '{% block content %}\\n';\r\n    code += '  <!-- Your template content here -->\\n';\r\n    code += '{% endblock %}\\n';\r\n    return code;\r\n  };\r\n  \r\n  Blockly.Python['django_create_form'] = function(block) {\r\n    var value_form_name = Blockly.Python.valueToCode(block, 'form_name', Blockly.Python.ORDER_ATOMIC);\r\n    // Generate Python code for creating a Django form\r\n    var code = 'from django import forms\\n\\n';\r\n    code += 'class ' + value_form_name + '(forms.Form):\\n';\r\n    code += Blockly.Python.INDENT + '# Your form fields here\\n';\r\n    return code;\r\n  };\r\n\r\n  // Blockly Blocks\r\nBlockly.Blocks['django_create_serializer'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Create Django Serializer\");\r\n    this.appendValueInput(\"serializer_name\")\r\n        .setCheck(\"String\")\r\n        .setAlign(Blockly.ALIGN_RIGHT)\r\n        .appendField(\"Serializer Name\");\r\n    this.setColour(160);\r\n    this.setTooltip(\"Creates a new serializer class in Django REST Framework.\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n\r\nBlockly.Blocks['django_create_migration'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Create Django Migration\");\r\n    this.appendValueInput(\"migration_name\")\r\n        .setCheck(\"String\")\r\n        .setAlign(Blockly.ALIGN_RIGHT)\r\n        .appendField(\"Migration Name\");\r\n    this.setColour(160);\r\n    this.setTooltip(\"Creates a new migration file in Django for database changes.\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n\r\nBlockly.Blocks['django_runserver'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Run Django Server\");\r\n    this.setPreviousStatement(true, null);\r\n    this.setNextStatement(true, null);\r\n    this.setColour(160);\r\n    this.setTooltip(\"Starts the Django development server.\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n\r\n\r\n  // Blockly Python\r\n  Blockly.Python['django_create_serializer'] = function(block) {\r\n    var value_serializer_name = Blockly.Python.valueToCode(block, 'serializer_name', Blockly.Python.ORDER_ATOMIC);\r\n    // Generate Python code for creating a Django serializer\r\n    var code = 'from rest_framework import serializers\\n\\n';\r\n    code += 'class ' + value_serializer_name + '(serializers.Serializer):\\n';\r\n    code += Blockly.Python.INDENT + '# Your serializer fields here\\n';\r\n    return code;\r\n  };\r\n  \r\n  Blockly.Python['django_create_migration'] = function(block) {\r\n    var value_migration_name = Blockly.Python.valueToCode(block, 'migration_name', Blockly.Python.ORDER_ATOMIC);\r\n    // Generate Python code for creating a Django migration\r\n    var code = 'python manage.py makemigrations ' + value_migration_name + '\\n';\r\n    return code;\r\n  };\r\n  \r\n  Blockly.Python['django_runserver'] = function(block) {\r\n    // Generate Python code for running Django server\r\n    var code = 'python manage.py runserver\\n';\r\n    return code;\r\n  };\r\n\r\n // Blockly Blocks\r\nBlockly.Blocks['django_makemigrations'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Django Make Migrations\");\r\n    this.appendValueInput(\"app_label\")\r\n        .setCheck(\"String\")\r\n        .setAlign(Blockly.ALIGN_RIGHT)\r\n        .appendField(\"App Label\");\r\n    this.setColour(160);\r\n    this.setTooltip(\"Creates new migration files for app models that have changed.\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n\r\nBlockly.Blocks['django_migrate'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Django Migrate\");\r\n    this.appendValueInput(\"app_label\")\r\n        .setCheck(\"String\")\r\n        .setAlign(Blockly.ALIGN_RIGHT)\r\n        .appendField(\"App Label\");\r\n    this.setColour(160);\r\n    this.setTooltip(\"Applies migrations to the database.\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n\r\nBlockly.Blocks['django_createsuperuser'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Django Create Superuser\");\r\n    this.appendValueInput(\"username\")\r\n        .setCheck(\"String\")\r\n        .setAlign(Blockly.ALIGN_RIGHT)\r\n        .appendField(\"Username\");\r\n    this.appendValueInput(\"email\")\r\n        .setCheck(\"String\")\r\n        .setAlign(Blockly.ALIGN_RIGHT)\r\n        .appendField(\"Email\");\r\n    this.setColour(160);\r\n    this.setTooltip(\"Creates a superuser account for Django admin interface.\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n\r\n  \r\n  // Blockly Python\r\n  Blockly.Python['django_makemigrations'] = function(block) {\r\n    var value_app_label = Blockly.Python.valueToCode(block, 'app_label', Blockly.Python.ORDER_ATOMIC);\r\n    // Generate Python code for Django make migrations\r\n    var code = 'python manage.py makemigrations ' + value_app_label + '\\n';\r\n    return code;\r\n  };\r\n  \r\n  Blockly.Python['django_migrate'] = function(block) {\r\n    var value_app_label = Blockly.Python.valueToCode(block, 'app_label', Blockly.Python.ORDER_ATOMIC);\r\n    // Generate Python code for Django migrate\r\n    var code = 'python manage.py migrate ' + value_app_label + '\\n';\r\n    return code;\r\n  };\r\n  \r\n  Blockly.Python['django_createsuperuser'] = function(block) {\r\n    var value_username = Blockly.Python.valueToCode(block, 'username', Blockly.Python.ORDER_ATOMIC);\r\n    var value_email = Blockly.Python.valueToCode(block, 'email', Blockly.Python.ORDER_ATOMIC);\r\n    // Generate Python code for creating Django superuser\r\n    var code = 'python manage.py createsuperuser --username=' + value_username + ' --email=' + value_email + '\\n';\r\n    return code;\r\n  };\r\n\r\n // Blockly Blocks\r\nBlockly.Blocks['django_manage'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Django Manage\");\r\n    this.appendValueInput(\"command\")\r\n        .setCheck(\"String\")\r\n        .setAlign(Blockly.ALIGN_RIGHT)\r\n        .appendField(\"Command\");\r\n    this.setColour(160);\r\n    this.setTooltip(\"Runs a Django management command.\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n\r\nBlockly.Blocks['django_collectstatic'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Django Collect Static\");\r\n    this.setColour(160);\r\n    this.setTooltip(\"Collects static files from each of your applications into a single location.\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n\r\nBlockly.Blocks['django_test'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Django Test\");\r\n    this.appendValueInput(\"app_label\")\r\n        .setCheck(\"String\")\r\n        .setAlign(Blockly.ALIGN_RIGHT)\r\n        .appendField(\"App Label\");\r\n    this.setColour(160);\r\n    this.setTooltip(\"Runs tests for all the test cases in the specified application.\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n\r\n\r\n  \r\n  // Blockly Python\r\n  Blockly.Python['django_manage'] = function(block) {\r\n    var value_command = Blockly.Python.valueToCode(block, 'command', Blockly.Python.ORDER_ATOMIC);\r\n    // Generate Python code for Django manage\r\n    var code = 'python manage.py ' + value_command + '\\n';\r\n    return code;\r\n  };\r\n  \r\n  Blockly.Python['django_collectstatic'] = function(block) {\r\n    // Generate Python code for Django collect static\r\n    var code = 'python manage.py collectstatic\\n';\r\n    return code;\r\n  };\r\n  \r\n  Blockly.Python['django_test'] = function(block) {\r\n    var value_app_label = Blockly.Python.valueToCode(block, 'app_label', Blockly.Python.ORDER_ATOMIC);\r\n    // Generate Python code for Django test\r\n    var code = 'python manage.py test ' + value_app_label + '\\n';\r\n    return code;\r\n  };\r\n\r\n // Blockly Blocks\r\nBlockly.Blocks['django_shell'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Django Shell\");\r\n    this.setColour(160);\r\n    this.setTooltip(\"Launches the Django interactive Python shell.\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n\r\nBlockly.Blocks['django_dumpdata'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Django Dumpdata\");\r\n    this.appendValueInput(\"app_label\")\r\n        .setCheck(\"String\")\r\n        .setAlign(Blockly.ALIGN_RIGHT)\r\n        .appendField(\"App Label\");\r\n    this.setColour(160);\r\n    this.setTooltip(\"Outputs the contents of the database as a fixture of the given app.\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n\r\nBlockly.Blocks['django_loaddata'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Django Loaddata\");\r\n    this.appendValueInput(\"file_name\")\r\n        .setCheck(\"String\")\r\n        .setAlign(Blockly.ALIGN_RIGHT)\r\n        .appendField(\"File Name\");\r\n    this.setColour(160);\r\n    this.setTooltip(\"Installs the named fixture(s) in the database.\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n\r\n  // Blockly Python\r\n  Blockly.Python['django_shell'] = function(block) {\r\n    // Generate Python code for Django shell\r\n    var code = 'python manage.py shell\\n';\r\n    return code;\r\n  };\r\n  \r\n  Blockly.Python['django_dumpdata'] = function(block) {\r\n    var value_app_label = Blockly.Python.valueToCode(block, 'app_label', Blockly.Python.ORDER_ATOMIC);\r\n    // Generate Python code for Django dumpdata\r\n    var code = 'python manage.py dumpdata ' + value_app_label + '\\n';\r\n    return code;\r\n  };\r\n  \r\n  Blockly.Python['django_loaddata'] = function(block) {\r\n    var value_file_name = Blockly.Python.valueToCode(block, 'file_name', Blockly.Python.ORDER_ATOMIC);\r\n    // Generate Python code for Django loaddata\r\n    var code = 'python manage.py loaddata ' + value_file_name + '\\n';\r\n    return code;\r\n  };\r\n\r\n  // Blockly.Blocks\r\nBlockly.Blocks['django_create_admin'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Django Create Admin\");\r\n    this.setColour(160);\r\n    this.setTooltip(\"Creates a superuser with administrative privileges.\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n\r\nBlockly.Blocks['django_create_user'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Django Create User\");\r\n    this.appendValueInput(\"username\")\r\n        .setCheck(\"String\")\r\n        .setAlign(Blockly.ALIGN_RIGHT)\r\n        .appendField(\"Username\");\r\n    this.appendValueInput(\"password\")\r\n        .setCheck(\"String\")\r\n        .setAlign(Blockly.ALIGN_RIGHT)\r\n        .appendField(\"Password\");\r\n    this.setColour(160);\r\n    this.setTooltip(\"Creates a new user with the provided username and password.\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n\r\nBlockly.Blocks['django_create_group'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Django Create Group\");\r\n    this.appendValueInput(\"group_name\")\r\n        .setCheck(\"String\")\r\n        .setAlign(Blockly.ALIGN_RIGHT)\r\n        .appendField(\"Group Name\");\r\n    this.setColour(160);\r\n    this.setTooltip(\"Creates a new group with the provided name.\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n\r\n  // Blockly Python\r\n  Blockly.Python['django_create_admin'] = function(block) {\r\n    // Generate Python code for Django create admin\r\n    var code = 'python manage.py createsuperuser\\n';\r\n    return code;\r\n  };\r\n  \r\n  Blockly.Python['django_create_user'] = function(block) {\r\n    var value_username = Blockly.Python.valueToCode(block, 'username', Blockly.Python.ORDER_ATOMIC);\r\n    var value_password = Blockly.Python.valueToCode(block, 'password', Blockly.Python.ORDER_ATOMIC);\r\n    // Generate Python code for Django create user\r\n    var code = 'python manage.py createsuperuser --username=' + value_username + ' --password=' + value_password + '\\n';\r\n    return code;\r\n  };\r\n  \r\n  Blockly.Python['django_create_group'] = function(block) {\r\n    var value_group_name = Blockly.Python.valueToCode(block, 'group_name', Blockly.Python.ORDER_ATOMIC);\r\n    // Generate Python code for Django create group\r\n    var code = 'python manage.py creategroup ' + value_group_name + '\\n';\r\n    return code;\r\n  };\r\n  \r\n  // Blockly Blocks\r\nBlockly.Blocks['django_create_url'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Django Create URL\");\r\n    this.setOutput(true, \"URLPattern\");\r\n    this.setColour(230);\r\n    this.setTooltip(\"Creates a URL pattern for routing in Django applications.\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n\r\nBlockly.Blocks['django_create_template_tag'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Django Create Template Tag\");\r\n    this.setOutput(true, \"TemplateTag\");\r\n    this.setColour(230);\r\n    this.setTooltip(\"Creates a custom template tag for use in Django templates.\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n\r\nBlockly.Blocks['django_create_management_command'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Django Create Management Command\");\r\n    this.setOutput(true, \"ManagementCommand\");\r\n    this.setColour(230);\r\n    this.setTooltip(\"Creates a custom management command for Django projects.\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n\r\nBlockly.Blocks['django_create_middleware'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Django Create Middleware\");\r\n    this.setOutput(true, \"Middleware\");\r\n    this.setColour(230);\r\n    this.setTooltip(\"Creates custom middleware for processing HTTP requests in Django.\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n\r\nBlockly.Blocks['django_create_signal'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Django Create Signal\");\r\n    this.setOutput(true, \"Signal\");\r\n    this.setColour(230);\r\n    this.setTooltip(\"Creates a custom signal for inter-app communication in Django.\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n\r\nBlockly.Blocks['django_create_custom_field'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Django Create Custom Field\");\r\n    this.setOutput(true, \"CustomField\");\r\n    this.setColour(230);\r\n    this.setTooltip(\"Creates a custom model field for use in Django models.\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n\r\nBlockly.Blocks['django_create_admin_action'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Django Create Admin Action\");\r\n    this.setOutput(true, \"AdminAction\");\r\n    this.setColour(230);\r\n    this.setTooltip(\"Creates a custom admin action for use in Django admin interface.\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n\r\nBlockly.Blocks['django_create_cache_middleware'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Django Create Cache Middleware\");\r\n    this.setOutput(true, \"CacheMiddleware\");\r\n    this.setColour(230);\r\n    this.setTooltip(\"Creates cache middleware for caching in Django applications.\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n\r\nBlockly.Blocks['django_create_authentication_backend'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Django Create Authentication Backend\");\r\n    this.setOutput(true, \"AuthenticationBackend\");\r\n    this.setColour(230);\r\n    this.setTooltip(\"Creates a custom authentication backend for Django authentication.\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n\r\nBlockly.Blocks['django_create_management_form'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Django Create Management Form\");\r\n    this.setOutput(true, \"ManagementForm\");\r\n    this.setColour(230);\r\n    this.setTooltip(\"Creates a custom management form for Django admin interface.\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n\r\nBlockly.Blocks['django_create_celery_task'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Django Create Celery Task\");\r\n    this.setOutput(true, \"CeleryTask\");\r\n    this.setColour(230);\r\n    this.setTooltip(\"Creates a Celery task for background processing in Django.\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n\r\nBlockly.Blocks['django_create_rest_api'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Django Create REST API\");\r\n    this.setOutput(true, \"RESTAPI\");\r\n    this.setColour(230);\r\n    this.setTooltip(\"Creates a RESTful API using Django Rest Framework.\");\r\n    this.setHelpUrl(\"\");\r\n  }\r\n};\r\n\r\n  \r\n  // Blockly Python\r\n  Blockly.Python['django_create_url'] = function(block) {\r\n    var code = 'from django.urls import path\\n\\n';\r\n    code += 'urlpatterns = [\\n';\r\n    code += '    path(\\'\\', views.index, name=\\'index\\'),\\n';\r\n    code += ']\\n';\r\n    return code;\r\n  };\r\n  \r\n  Blockly.Python['django_create_template_tag'] = function(block) {\r\n    var code = 'from django import template\\n\\n';\r\n    code += 'register = template.Library()\\n\\n';\r\n    code += '@register.simple_tag\\n';\r\n    code += 'def my_tag(value):\\n';\r\n    code += '    return value\\n';\r\n    return code;\r\n  };\r\n  \r\n  Blockly.Python['django_create_management_command'] = function(block) {\r\n    var code = 'from django.core.management.base import BaseCommand\\n\\n';\r\n    code += 'class Command(BaseCommand):\\n';\r\n    code += '    help = \\'Your custom management command here\\'\\n\\n';\r\n    code += '    def handle(self, *args, **options):\\n';\r\n    code += '        # Your command logic here\\n';\r\n    return code;\r\n  };\r\n  \r\n  Blockly.Python['django_create_middleware'] = function(block) {\r\n    var code = 'class MyMiddleware:\\n';\r\n    code += '    def __init__(self, get_response):\\n';\r\n    code += '        self.get_response = get_response\\n\\n';\r\n    code += '    def __call__(self, request):\\n';\r\n    code += '        # Your middleware logic here\\n';\r\n    code += '        response = self.get_response(request)\\n';\r\n    code += '        return response\\n';\r\n    return code;\r\n  };\r\n  \r\n  Blockly.Python['django_create_signal'] = function(block) {\r\n    var code = 'from django.db.models.signals import pre_save\\n';\r\n    code += 'from django.dispatch import receiver\\n\\n';\r\n    code += '@receiver(pre_save)\\n';\r\n    code += 'def my_signal(sender, instance, **kwargs):\\n';\r\n    code += '    # Your signal logic here\\n';\r\n    return code;\r\n  };\r\n  \r\n  Blockly.Python['django_create_custom_field'] = function(block) {\r\n    var code = 'from django.db import models\\n\\n';\r\n    code += 'class MyField(models.Field):\\n';\r\n    code += '    # Your custom field logic here\\n';\r\n    return code;\r\n  };\r\n  \r\n  Blockly.Python['django_create_admin_action'] = function(block) {\r\n    var code = 'from django.contrib import admin\\n\\n';\r\n    code += 'def my_action(modeladmin, request, queryset):\\n';\r\n    code += '    # Your admin action logic here\\n';\r\n    code += '    pass\\n\\n';\r\n    code += 'my_action.short_description = \\'My Action\\'\\n\\n';\r\n    code += 'class MyModelAdmin(admin.ModelAdmin):\\n';\r\n    code += '    actions = [my_action]\\n';\r\n    return code;\r\n  };\r\n  \r\n  Blockly.Python['django_create_cache_middleware'] = function(block) {\r\n    var code = 'class CacheMiddleware:\\n';\r\n    code += '    def __init__(self, get_response):\\n';\r\n    code += '        self.get_response = get_response\\n\\n';\r\n    code += '    def __call__(self, request):\\n';\r\n    code += '        # Your cache middleware logic here\\n';\r\n    code += '        response = self.get_response(request)\\n';\r\n    code += '        return response\\n';\r\n    return code;\r\n  };\r\n  \r\n  Blockly.Python['django_create_authentication_backend'] = function(block) {\r\n    var code = 'from django.contrib.auth.backends import BaseBackend\\n\\n';\r\n    code += 'class MyBackend(BaseBackend):\\n';\r\n    code += '    # Your authentication backend logic here\\n';\r\n    return code;\r\n  };\r\n  \r\n  Blockly.Python['django_create_management_form'] = function(block) {\r\n    var code = 'from django import forms\\n\\n';\r\n    code += 'class MyForm(forms.Form):\\n';\r\n    code += '    # Your management form logic here\\n';\r\n    return code;\r\n  };\r\n  \r\n  Blockly.Python['django_create_celery_task'] = function(block) {\r\n    var code = 'from celery import shared_task\\n\\n';\r\n    code += '@shared_task\\n';\r\n    code += 'def my_task():\\n';\r\n    code += '    # Your Celery task logic here\\n';\r\n    return code;\r\n  };\r\n  \r\n  Blockly.Python['django_create_rest_api'] = function(block) {\r\n    var code = 'from rest_framework.views import APIView\\n';\r\n    code += 'from rest_framework.response import Response\\n\\n';\r\n    code += 'class MyAPI(APIView):\\n';\r\n    code += '    def get(self, request):\\n';\r\n    code += '        # Your API logic here\\n';\r\n    code += '        return Response({\\'message\\': \\'Hello, World!\\'})\\n';\r\n    return code;\r\n  };\r\n  ","D:\\tarcin\\code_asthram_dev\\frontend\\src\\scripts\\buttonFunctions.js",[],"D:\\tarcin\\code_asthram_dev\\frontend\\src\\customBlocks\\custom_Blocks.js",[],{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","replacedBy":"160"},{"ruleId":"161","severity":1,"message":"162","line":23,"column":9,"nodeType":"163","messageId":"164","endLine":23,"endColumn":20},{"ruleId":"161","severity":1,"message":"165","line":26,"column":10,"nodeType":"163","messageId":"164","endLine":26,"endColumn":21},{"ruleId":"166","severity":1,"message":"167","line":215,"column":13,"nodeType":"168","endLine":215,"endColumn":74},{"ruleId":"166","severity":1,"message":"167","line":219,"column":13,"nodeType":"168","endLine":224,"endColumn":15},{"ruleId":"161","severity":1,"message":"169","line":19,"column":10,"nodeType":"163","messageId":"164","endLine":19,"endColumn":26},{"ruleId":"161","severity":1,"message":"170","line":2,"column":8,"nodeType":"163","messageId":"164","endLine":2,"endColumn":18},{"ruleId":"161","severity":1,"message":"171","line":5,"column":8,"nodeType":"163","messageId":"164","endLine":5,"endColumn":15},{"ruleId":"161","severity":1,"message":"172","line":2,"column":35,"nodeType":"163","messageId":"164","endLine":2,"endColumn":44},{"ruleId":"161","severity":1,"message":"173","line":2,"column":46,"nodeType":"163","messageId":"164","endLine":2,"endColumn":56},{"ruleId":"161","severity":1,"message":"174","line":13,"column":10,"nodeType":"163","messageId":"164","endLine":13,"endColumn":24},{"ruleId":"161","severity":1,"message":"175","line":13,"column":26,"nodeType":"163","messageId":"164","endLine":13,"endColumn":41},{"ruleId":"161","severity":1,"message":"176","line":40,"column":10,"nodeType":"163","messageId":"164","endLine":40,"endColumn":19},{"ruleId":"161","severity":1,"message":"177","line":40,"column":21,"nodeType":"163","messageId":"164","endLine":40,"endColumn":33},{"ruleId":"161","severity":1,"message":"178","line":823,"column":9,"nodeType":"163","messageId":"164","endLine":823,"endColumn":25},{"ruleId":"161","severity":1,"message":"179","line":854,"column":9,"nodeType":"163","messageId":"164","endLine":854,"endColumn":30},{"ruleId":"180","severity":1,"message":"181","line":865,"column":2,"nodeType":"182","messageId":"183","endLine":896,"endColumn":11},{"ruleId":"161","severity":1,"message":"184","line":265,"column":7,"nodeType":"163","messageId":"164","endLine":265,"endColumn":15},{"ruleId":"185","severity":1,"message":"186","line":24,"column":25,"nodeType":"187","messageId":"188","endLine":24,"endColumn":26},{"ruleId":"185","severity":1,"message":"186","line":24,"column":31,"nodeType":"187","messageId":"188","endLine":24,"endColumn":32},{"ruleId":"161","severity":1,"message":"189","line":418,"column":9,"nodeType":"163","messageId":"164","endLine":418,"endColumn":14},{"ruleId":"161","severity":1,"message":"190","line":419,"column":9,"nodeType":"163","messageId":"164","endLine":419,"endColumn":14},{"ruleId":"161","severity":1,"message":"191","line":442,"column":9,"nodeType":"163","messageId":"164","endLine":442,"endColumn":18},{"ruleId":"161","severity":1,"message":"192","line":443,"column":9,"nodeType":"163","messageId":"164","endLine":443,"endColumn":19},{"ruleId":"161","severity":1,"message":"190","line":444,"column":9,"nodeType":"163","messageId":"164","endLine":444,"endColumn":14},{"ruleId":"161","severity":1,"message":"193","line":126,"column":9,"nodeType":"163","messageId":"164","endLine":126,"endColumn":28},"no-native-reassign",["194"],"no-negated-in-lhs",["195"],"no-unused-vars","'isLoginPage' is assigned a value but never used.","Identifier","unusedVar","'isSuperuser' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'passwordStrength' is assigned a value but never used.","'SyncLoader' is defined but never used.","'PreLogo' is defined but never used.","'useEffect' is defined but never used.","'forwardRef' is defined but never used.","'ModuleDropdown' is defined but never used.","'ProjectDropdown' is defined but never used.","'workspace' is assigned a value but never used.","'setWorkspace' is assigned a value but never used.","'toggleVisibility' is assigned a value but never used.","'handleOpenButtonClick' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'fontUnit' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'array' is assigned a value but never used.","'pivot' is assigned a value but never used.","'leftArray' is assigned a value but never used.","'rightArray' is assigned a value but never used.","'value_template_name' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]